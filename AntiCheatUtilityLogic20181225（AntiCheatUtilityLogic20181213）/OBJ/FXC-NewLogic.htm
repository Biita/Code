<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\FXC-NewLogic.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\FXC-NewLogic.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Mon Jun 04 11:25:32 2018
<BR><P>
<H3>Maximum Stack Usage =       4952 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TaskRec6 &rArr; FPostVehForLoop &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b]">Reset</a>
 <LI><a href="#[5]">SoftwareInterruptAdd</a>
 <LI><a href="#[49]">InitStack</a>
 <LI><a href="#[4a]">__user_initial_stackheap</a>
 <LI><a href="#[4b]">_sys_exit</a>
 <LI><a href="#[4c]">__rt_div0</a>
 <LI><a href="#[4d]">_sys_close</a>
 <LI><a href="#[4e]">_sys_command_string</a>
 <LI><a href="#[4f]">_sys_ensure</a>
 <LI><a href="#[50]">_sys_flen</a>
 <LI><a href="#[51]">_sys_istty</a>
 <LI><a href="#[52]">_sys_read</a>
 <LI><a href="#[53]">_sys_seek</a>
 <LI><a href="#[54]">_sys_tmpnam</a>
 <LI><a href="#[55]">_sys_write</a>
 <LI><a href="#[56]">fgetc</a>
 <LI><a href="#[7d]">vicInitial</a>
 <LI><a href="#[9]">FIQ_Handler</a>
 <LI><a href="#[8]">IRQ_Handler</a>
 <LI><a href="#[58]">vicControl</a>
 <LI><a href="#[57]">SoftwareInterrupt</a>
 <LI><a href="#[3a]">OSIntCtxSw</a>
 <LI><a href="#[293]">__OSStartHighRdy</a>
 <LI><a href="#[4]">Undefined</a>
 <LI><a href="#[6]">PrefetchAbort</a>
 <LI><a href="#[7]">DataAbort</a>
 <LI><a href="#[3]">ResetInit</a>
 <LI><a href="#[37]">IRQ_SCI1_Func</a>
 <LI><a href="#[38]">IRQ_SCI2_Func</a>
 <LI><a href="#[25]">SetmicIrqFunc</a>
 <LI><a href="#[26]">ClrmicIrqFunc</a>
 <LI><a href="#[27]">EnablemicIrq</a>
 <LI><a href="#[28]">DisablemicIrq</a>
 <LI><a href="#[29]">SetmicFiq</a>
 <LI><a href="#[2a]">ClrmicFiq</a>
 <LI><a href="#[2b]">Setsic1IrqFunc</a>
 <LI><a href="#[2c]">Clrsic1IrqFunc</a>
 <LI><a href="#[2d]">Enablesic1Irq</a>
 <LI><a href="#[2e]">Disablesic1Irq</a>
 <LI><a href="#[2f]">Setsic1Fiq</a>
 <LI><a href="#[30]">Clrsic1Fiq</a>
 <LI><a href="#[31]">Setsic2IrqFunc</a>
 <LI><a href="#[32]">Clrsic2IrqFunc</a>
 <LI><a href="#[33]">Enablesic2Irq</a>
 <LI><a href="#[34]">Disablesic2Irq</a>
 <LI><a href="#[35]">Setsic2Fiq</a>
 <LI><a href="#[36]">Clrsic2Fiq</a>
 <LI><a href="#[3b]">TASK_SW</a>
 <LI><a href="#[3c]">ENTER_CRITICAL</a>
 <LI><a href="#[3d]">EXIT_CRITICAL</a>
 <LI><a href="#[3e]">ISRBegin</a>
 <LI><a href="#[3f]">ChangeToSYSMode</a>
 <LI><a href="#[40]">ChangeToUSRMode</a>
 <LI><a href="#[41]">_OSStartHighRdy</a>
 <LI><a href="#[42]">TaskIsARM</a>
 <LI><a href="#[43]">TaskIsTHUMB</a>
 <LI><a href="#[44]">OSISRNeedSwap</a>
 <LI><a href="#[45]">GetOSFunctionAddr</a>
 <LI><a href="#[46]">GetUsrFunctionAddr</a>
 <LI><a href="#[47]">EnableIRQ</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">Undefined</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">Undefined</a><BR>
 <LI><a href="#[6]">PrefetchAbort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">PrefetchAbort</a><BR>
 <LI><a href="#[7]">DataAbort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DataAbort</a><BR>
 <LI><a href="#[4b]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3f]">ChangeToSYSMode</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[40]">ChangeToUSRMode</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[2a]">ClrmicFiq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[26]">ClrmicIrqFunc</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[30]">Clrsic1Fiq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[2c]">Clrsic1IrqFunc</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[36]">Clrsic2Fiq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[32]">Clrsic2IrqFunc</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[7]">DataAbort</a> from startup.o(vectors) referenced from startup.o(vectors)
 <LI><a href="#[28]">DisablemicIrq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[2e]">Disablesic1Irq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[34]">Disablesic2Irq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[3c]">ENTER_CRITICAL</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[3d]">EXIT_CRITICAL</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[47]">EnableIRQ</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[27]">EnablemicIrq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[2d]">Enablesic1Irq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[33]">Enablesic2Irq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[39]">FIQ_Exception</a> from target.o(.text) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[9]">FIQ_Handler</a> from viccontrol.o(RUNFIRST) referenced from startup.o(vectors)
 <LI><a href="#[45]">GetOSFunctionAddr</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[46]">GetUsrFunctionAddr</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[19]">I2C1_Excetion</a> from i2c1.o(.text) referenced from i2c1.o(.text)
 <LI><a href="#[1a]">I2C2_Excetion</a> from i2c2.o(.text) referenced from i2c2.o(.text)
 <LI><a href="#[20]">IRQ_FPGA</a> from fpga_app.o(.text) referenced from fpga_app.o(.text)
 <LI><a href="#[8]">IRQ_Handler</a> from viccontrol.o(RUNFIRST) referenced from startup.o(vectors)
 <LI><a href="#[21]">IRQ_Keyboard</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[37]">IRQ_SCI1_Func</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[38]">IRQ_SCI2_Func</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[1c]">IRQ_Timer0</a> from timer0.o(.text) referenced from timer0.o(.text)
 <LI><a href="#[1f9]">IRQ_UART1</a> from uart1.o(.text) referenced from uart1.o(.text)
 <LI><a href="#[1d]">IRQ_UART2</a> from uart2.o(.text) referenced from uart2.o(.text)
 <LI><a href="#[1e]">IRQ_UART5</a> from uart5.o(.text) referenced from uart5.o(.text)
 <LI><a href="#[1e6]">IRQ_Uart3</a> from uart3.o(.text) referenced from uart3.o(.text)
 <LI><a href="#[1f]">IRQ_W5100</a> from w5100app.o(.text) referenced from w5100app.o(.text)
 <LI><a href="#[3e]">ISRBegin</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[1b]">MCI_Handler</a> from sdhal.o(.text) referenced from sdapp.o(.text)
 <LI><a href="#[44]">OSISRNeedSwap</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[3a]">OSIntCtxSw</a> from os_cpu_a.o(subr) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[84]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[7e]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[6]">PrefetchAbort</a> from startup.o(vectors) referenced from startup.o(vectors)
 <LI><a href="#[b]">Reset</a> from startup.o(vectors) referenced from target.o(.text)
 <LI><a href="#[3]">ResetInit</a> from startup.o(vectors) referenced from startup.o(vectors)
 <LI><a href="#[29]">SetmicFiq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[25]">SetmicIrqFunc</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[2f]">Setsic1Fiq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[2b]">Setsic1IrqFunc</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[35]">Setsic2Fiq</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[31]">Setsic2IrqFunc</a> from viccontrol.o(RUNFIRST) referenced from viccontrol.o(RUNFIRST)
 <LI><a href="#[5]">SoftwareInterruptAdd</a> from startup.o(vectors) referenced from startup.o(vectors)
 <LI><a href="#[3b]">TASK_SW</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[16]">TaskDebugInfo</a> from taskdebuginfo.o(.text) referenced from common.o(.text)
 <LI><a href="#[42]">TaskIsARM</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[43]">TaskIsTHUMB</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[e]">TaskRec1</a> from wt_task.o(.text) referenced from common.o(.text)
 <LI><a href="#[d]">TaskRec2</a> from tasktimer.o(.text) referenced from common.o(.text)
 <LI><a href="#[f]">TaskRec3</a> from taskkb.o(.text) referenced from common.o(.text)
 <LI><a href="#[10]">TaskRec4</a> from taskanalysis.o(.text) referenced from common.o(.text)
 <LI><a href="#[11]">TaskRec6</a> from taskanalysis.o(.text) referenced from common.o(.text)
 <LI><a href="#[12]">TaskRec7</a> from taskprotocol.o(.text) referenced from common.o(.text)
 <LI><a href="#[14]">TaskRec9</a> from taskjdinf.o(.text) referenced from common.o(.text)
 <LI><a href="#[18]">TaskRecWave</a> from taskwave.o(.text) referenced from common.o(.text)
 <LI><a href="#[17]">TaskSDCard</a> from tasksdcard.o(.text) referenced from common.o(.text)
 <LI><a href="#[c]">TaskStart</a> from wt_task.o(.text) referenced from wt_task.o(.text)
 <LI><a href="#[13]">Task_Laser_Interact</a> from task_laser_interact.o(.text) referenced from common.o(.text)
 <LI><a href="#[15]">Task_UI</a> from task_ui.o(.text) referenced from common.o(.text)
 <LI><a href="#[4]">Undefined</a> from startup.o(vectors) referenced from startup.o(vectors)
 <LI><a href="#[41]">_OSStartHighRdy</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[24]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[23]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[22]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[a]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b]"></a>Reset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>SoftwareInterruptAdd</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vicControl
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[49]"></a>InitStack</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetInit
</UL>

<P><STRONG><a name="[4a]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4b]"></a>_sys_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[4c]"></a>__rt_div0</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors), UNUSED, KEPT)

<P><STRONG><a name="[4d]"></a>_sys_close</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors), UNUSED, KEPT)

<P><STRONG><a name="[4e]"></a>_sys_command_string</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors), UNUSED, KEPT)

<P><STRONG><a name="[4f]"></a>_sys_ensure</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors), UNUSED, KEPT)

<P><STRONG><a name="[50]"></a>_sys_flen</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors), UNUSED, KEPT)

<P><STRONG><a name="[51]"></a>_sys_istty</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors), UNUSED, KEPT)

<P><STRONG><a name="[52]"></a>_sys_read</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors), UNUSED, KEPT)

<P><STRONG><a name="[53]"></a>_sys_seek</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors), UNUSED, KEPT)

<P><STRONG><a name="[54]"></a>_sys_tmpnam</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors), UNUSED, KEPT)

<P><STRONG><a name="[55]"></a>_sys_write</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors), UNUSED, KEPT)

<P><STRONG><a name="[56]"></a>fgetc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors), UNUSED, KEPT)

<P><STRONG><a name="[48]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetInit
</UL>

<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5c]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2b4]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2b5]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2b6]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[5d]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2b7]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5e]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[271]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via BLX)
</UL>

<P><STRONG><a name="[60]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[61]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[62]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[64]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[2b8]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[66]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[68]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[2b9]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[72]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[2ba]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[2bb]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[2bc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via BLX)
</UL>

<P><STRONG><a name="[2bd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2be]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via BLX)
</UL>

<P><STRONG><a name="[2bf]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2c0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2c1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2c2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2c3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2c4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2c5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2c6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2c7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2c8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2c9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2ca]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2cb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[2cc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2cd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[76]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[2ce]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2cf]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2d0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2d1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2d2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2d3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[5b]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2d4]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6f]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[71]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[2d5]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[73]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[2d6]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[283]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[75]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[2d7]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[77]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[10d]"></a>rand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FStudyAlg (via BLX)
</UL>

<P><STRONG><a name="[a]"></a>main</STRONG> (ARM, 220 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStartTask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JZInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[39]"></a>FIQ_Exception</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[7c]"></a>TargetInit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = TargetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vicInitial
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[59]"></a>TargetResetInit</STRONG> (ARM, 360 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetInit
</UL>

<P><STRONG><a name="[2d8]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>OS_TaskStat</STRONG> (ARM, 224 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>OS_TaskIdle</STRONG> (ARM, 52 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>OSInit</STRONG> (ARM, 44 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d9]"></a>OSIntEnter</STRONG> (ARM, 56 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>OSIntExit</STRONG> (ARM, 248 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIntExit
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Keyboard
</UL>

<P><STRONG><a name="[c8]"></a>OSSchedLock</STRONG> (ARM, 76 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[8f]"></a>OS_Sched</STRONG> (ARM, 176 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[8e]"></a>OSSchedUnlock</STRONG> (ARM, 136 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[7b]"></a>OSStart</STRONG> (ARM, 128 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSStart &rArr; OSStartHighRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>OSStatInit</STRONG> (ARM, 96 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[92]"></a>OSTimeTick</STRONG> (ARM, 224 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Timer0
</UL>

<P><STRONG><a name="[2da]"></a>OSVersion</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>OS_EventTaskRdy</STRONG> (ARM, 192 bytes, Stack size 28 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>

<P><STRONG><a name="[9a]"></a>OS_EventTaskWait</STRONG> (ARM, 188 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[9b]"></a>OS_EventTO</STRONG> (ARM, 116 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[98]"></a>OS_EventWaitListInit</STRONG> (ARM, 40 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[94]"></a>OS_TCBInit</STRONG> (ARM, 344 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[a1]"></a>OSTaskStkInit</STRONG> (ARM, 228 bytes, Stack size 12 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[90]"></a>OSStartHighRdy</STRONG> (ARM, 16 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[294]"></a>_TaskIsARM</STRONG> (ARM, 52 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskIsARM
</UL>

<P><STRONG><a name="[295]"></a>_TaskIsTHUMB</STRONG> (ARM, 52 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskIsTHUMB
</UL>

<P><STRONG><a name="[87]"></a>OSInitHookBegin</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[8d]"></a>OSInitHookEnd</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[96]"></a>OSTaskCreateHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[2db]"></a>OSTaskDelHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>OSTaskSwHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OSStartHighRdy
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>

<P><STRONG><a name="[81]"></a>OSTaskStatHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[95]"></a>OSTCBInitHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[93]"></a>OSTimeTickHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[85]"></a>OSTaskIdleHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[cc]"></a>OSQAccept</STRONG> (ARM, 108 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSQAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDebugInfo
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[97]"></a>OSQCreate</STRONG> (ARM, 252 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicMem_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;External_Equipment_init
</UL>

<P><STRONG><a name="[2dc]"></a>OSQFlush</STRONG> (ARM, 60 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>OSQPend</STRONG> (ARM, 332 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4
</UL>

<P><STRONG><a name="[9c]"></a>OSQPost</STRONG> (ARM, 176 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedUnionWgtAlg
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProPostAxle
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedMatchRule
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpanColumnTimeMatch
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveColumElem
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff_FXC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff0ForBD
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff0
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC_FXC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenAxleCtl
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FStudyAlg
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDebugInfo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchSecondRow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideFristRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostVehForNormal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostAxle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehXieZouStatus
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec1
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendWaveBE
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_FPGA
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Uart3
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCompleteData
</UL>

<P><STRONG><a name="[130]"></a>OSQQuery</STRONG> (ARM, 148 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSQQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
</UL>

<P><STRONG><a name="[8c]"></a>OS_QInit</STRONG> (ARM, 68 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[119]"></a>OSSemAccept</STRONG> (ARM, 56 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSSemAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F11
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec3
</UL>

<P><STRONG><a name="[9e]"></a>OSSemCreate</STRONG> (ARM, 132 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicMem_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;External_Equipment_init
</UL>

<P><STRONG><a name="[9f]"></a>OSSemPend</STRONG> (ARM, 252 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedUnionWgtAlg
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProPostAxle
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedMatchRule
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpanColumnTimeMatch
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveColumElem
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenAxleCtl
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FStudyAlg
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec3
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDebugInfo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchSecondRow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideFristRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostVehForNormal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostAxle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehXieZouStatus
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec1
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendWaveBE
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum
</UL>

<P><STRONG><a name="[a0]"></a>OSSemPost</STRONG> (ARM, 128 bytes, Stack size 8 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedUnionWgtAlg
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProPostAxle
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedMatchRule
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpanColumnTimeMatch
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveColumElem
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenAxleCtl
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FStudyAlg
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec3
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDebugInfo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchSecondRow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideFristRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostVehForNormal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostAxle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehXieZouStatus
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec1
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendWaveBE
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Keyboard
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Timer0
</UL>

<P><STRONG><a name="[83]"></a>OSTaskCreate</STRONG> (ARM, 248 bytes, Stack size 40 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStartTask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTaskBuild
</UL>

<P><STRONG><a name="[a2]"></a>OSTaskResume</STRONG> (ARM, 192 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[a3]"></a>OSTaskSuspend</STRONG> (ARM, 208 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTaskBuild
</UL>

<P><STRONG><a name="[7f]"></a>OSTimeDly</STRONG> (ARM, 144 bytes, Stack size 8 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F11
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSenddata
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSend39data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend39Info
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend01Info
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec3
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDebugInfo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStartupCnt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec1
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStackTaskUse
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[e9]"></a>OSTimeGet</STRONG> (ARM, 36 bytes, Stack size 8 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
</UL>

<P><STRONG><a name="[2dd]"></a>OSTimeSet</STRONG> (ARM, 36 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>JZInit</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = JZInit &rArr; LogicMem_init &rArr; OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicMem_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_diagnosis_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;External_Equipment_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>TaskStart</STRONG> (ARM, 1288 bytes, Stack size 0 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = TaskStart &rArr; FSendCmd2PC_ZONG &rArr; SendCommandToPC0 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeW5100
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTaskBuild
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendCmd2PC_ZONG
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAInitParam
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIOStatusInt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStartupCnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wt_task.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>RunStartTask</STRONG> (ARM, 40 bytes, Stack size 8 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RunStartTask &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>CheckStackTaskUse</STRONG> (ARM, 48 bytes, Stack size 0 bytes, wt_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[b3]"></a>FPostVehForNormal</STRONG> (ARM, 2856 bytes, Stack size 64 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = FPostVehForNormal &rArr; FPostVehForLoop &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWaitingForMatchColumNum
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[b7]"></a>FPostVehForAbNormal</STRONG> (ARM, 3200 bytes, Stack size 48 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = FPostVehForAbNormal &rArr; FPostVehForLoop &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_FindVehEnd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[b9]"></a>IsHaveFlag</STRONG> (ARM, 3616 bytes, Stack size 40 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IsHaveFlag &rArr; FTransLocation &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTransLocation
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[cf]"></a>FCheckZTDevice</STRONG> (ARM, 1916 bytes, Stack size 36 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FCheckZTDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[cd]"></a>FCheckIODevice</STRONG> (ARM, 1408 bytes, Stack size 12 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FCheckIODevice
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[bb]"></a>FInitVehStr</STRONG> (ARM, 540 bytes, Stack size 16 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = FInitVehStr &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicMem_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideSecondRow
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostVehForNormal
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum
</UL>

<P><STRONG><a name="[be]"></a>FDeleteValidZTOrColum</STRONG> (ARM, 3408 bytes, Stack size 56 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = FDeleteValidZTOrColum &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveAndInitWonder
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveAndInitColum
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FInitVehStr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[c2]"></a>FVehPassStatus</STRONG> (ARM, 2528 bytes, Stack size 64 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = FVehPassStatus &rArr; SendDataNet &rArr; S_tx_process
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataNet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReConnect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[c6]"></a>FSendWaveBE</STRONG> (ARM, 2220 bytes, Stack size 136 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = FSendWaveBE &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[cb]"></a>FRecordIO</STRONG> (ARM, 716 bytes, Stack size 28 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FRecordIO
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[ca]"></a>FRecordIO_Laser</STRONG> (ARM, 1476 bytes, Stack size 60 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FRecordIO_Laser
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[c9]"></a>FCheckDeviceERR</STRONG> (ARM, 428 bytes, Stack size 0 bytes, wt_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[c7]"></a>FLogicForLoop</STRONG> (ARM, 6192 bytes, Stack size 368 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228 + Unknown Stack Size
<LI>Call Chain = FLogicForLoop &rArr; FMatchColumAndCloum &rArr; FMatchRuleFunc &rArr; DetailedMatchRule &rArr; FindFirstRowZT &rArr; ColumInitSolo &rArr; ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchSecondRow
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FZTWheelCnt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FZTMatch2Whel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTransLocation
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendCmd2PC_ZONG
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideSecondRow
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideFristRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostVehForNormal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostAxle
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckDeviceERR
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRecordIO_Laser
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRecordIO
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendWaveBE
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehPassStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckIODevice
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckZTDevice
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHaveFlag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForAbNormal
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForNormal
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec1
</UL>

<P><STRONG><a name="[e]"></a>TaskRec1</STRONG> (ARM, 360 bytes, Stack size 24 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252 + Unknown Stack Size
<LI>Call Chain = TaskRec1 &rArr; FLogicForLoop &rArr; FMatchColumAndCloum &rArr; FMatchRuleFunc &rArr; DetailedMatchRule &rArr; FindFirstRowZT &rArr; ColumInitSolo &rArr; ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>FIO2ZT4Wave</STRONG> (ARM, 3232 bytes, Stack size 24 bytes, wt_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[2de]"></a>FLaserProcess</STRONG> (ARM, 5440 bytes, Stack size 84 bytes, wt_task.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>FVehXieZouStatus</STRONG> (ARM, 4120 bytes, Stack size 136 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = FVehXieZouStatus &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
</UL>

<P><STRONG><a name="[2df]"></a>FIOOutput</STRONG> (ARM, 1028 bytes, Stack size 20 bytes, wt_task.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>FCapture</STRONG> (ARM, 844 bytes, Stack size 40 bytes, wt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FCapture &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U3SendBytes
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2SendBytes
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildNewVeh
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
</UL>

<P><STRONG><a name="[e1]"></a>ScaleUp</STRONG> (ARM, 68 bytes, Stack size 16 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[c4]"></a>AddCrc16</STRONG> (ARM, 92 bytes, Stack size 12 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AddCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDInfToSaveSend
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff_FXC
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff0ForBD
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff0
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC_FXC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FStudyAlg
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProModInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitJDParam
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc3_create
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO2ZT4Wave
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendWaveBE
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehPassStatus
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProcessPrt
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNonWeight
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitThreshold
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNetInfo
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParams
</UL>

<P><STRONG><a name="[fa]"></a>CheckCrc</STRONG> (ARM, 124 bytes, Stack size 12 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_W5100
</UL>

<P><STRONG><a name="[e2]"></a>bcd</STRONG> (ARM, 88 bytes, Stack size 24 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[e3]"></a>StaticXiuZhengIndex</STRONG> (ARM, 92 bytes, Stack size 16 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[e4]"></a>RootFloat</STRONG> (ARM, 132 bytes, Stack size 40 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RootFloat &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjdlen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
</UL>

<P><STRONG><a name="[e8]"></a>timer_set</STRONG> (ARM, 36 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_set &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
</UL>

<P><STRONG><a name="[2e0]"></a>timer_reset</STRONG> (ARM, 20 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>timer_restart</STRONG> (ARM, 20 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_restart &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
</UL>

<P><STRONG><a name="[eb]"></a>timer_expired</STRONG> (ARM, 84 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_expired &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
</UL>

<P><STRONG><a name="[c5]"></a>FReConnect</STRONG> (ARM, 304 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FReConnect &rArr; Socket_Listen
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehPassStatus
</UL>

<P><STRONG><a name="[ee]"></a>FFendu</STRONG> (ARM, 112 bytes, Stack size 24 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = FFendu
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FStudyAlg
</UL>

<P><STRONG><a name="[ef]"></a>Nm2Bcd</STRONG> (ARM, 100 bytes, Stack size 24 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Nm2Bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff1
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc3_create
</UL>

<P><STRONG><a name="[f0]"></a>Crc3_create</STRONG> (ARM, 112 bytes, Stack size 24 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Crc3_create &rArr; Nm2Bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nm2Bcd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff1
</UL>

<P><STRONG><a name="[f1]"></a>FIsRunYear</STRONG> (ARM, 108 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FIsRunYear &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetNextSDNum
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTime_Process
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetLastSaveNum
</UL>

<P><STRONG><a name="[f2]"></a>FDaysOneYear</STRONG> (ARM, 84 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FDaysOneYear &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDateFromNum
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDaysOneMon
</UL>

<P><STRONG><a name="[f3]"></a>FDaysOneMon</STRONG> (ARM, 204 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FDaysOneMon &rArr; FDaysOneYear &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDaysOneYear
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDateFromNum
</UL>

<P><STRONG><a name="[261]"></a>JDCRC16</STRONG> (ARM, 80 bytes, Stack size 12 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = JDCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCompleteData
</UL>

<P><STRONG><a name="[a4]"></a>Sys_init</STRONG> (ARM, 208 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Sys_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JZInit
</UL>

<P><STRONG><a name="[a5]"></a>LogicMem_init</STRONG> (ARM, 2460 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LogicMem_init &rArr; OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FInitVehStr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JZInit
</UL>

<P><STRONG><a name="[a6]"></a>External_Equipment_init</STRONG> (ARM, 340 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = External_Equipment_init &rArr; OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JZInit
</UL>

<P><STRONG><a name="[a7]"></a>Fault_diagnosis_init</STRONG> (ARM, 84 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fault_diagnosis_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JZInit
</UL>

<P><STRONG><a name="[ab]"></a>FReadFromTDC</STRONG> (ARM, 2488 bytes, Stack size 32 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = FReadFromTDC &rArr; InitSystem &rArr; InitNetParam &rArr; SaveNetInfo &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadC256
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProModInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNetParam
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitJDParam
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllSP
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRead68FromTDC
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRead62FromTDC
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRead61FromTDC
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRead39FromTDC
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRead01FromTDC
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearStartupCnt
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RootFloat
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[ae]"></a>FTaskBuild</STRONG> (ARM, 272 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FTaskBuild &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[af]"></a>FIOStatusInt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[102]"></a>FNetCheckClose</STRONG> (ARM, 84 bytes, Stack size 16 bytes, tasktimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FNetCheckClose &rArr; Socket_Listen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
</UL>

<P><STRONG><a name="[104]"></a>FNetSendKeepalive</STRONG> (ARM, 72 bytes, Stack size 16 bytes, tasktimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FNetSendKeepalive
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNetKeepalive
</UL>

<P><STRONG><a name="[106]"></a>FNetKeepalive</STRONG> (ARM, 84 bytes, Stack size 16 bytes, tasktimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FNetKeepalive &rArr; FNetSendKeepalive
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNetSendKeepalive
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
</UL>

<P><STRONG><a name="[d]"></a>TaskRec2</STRONG> (ARM, 5632 bytes, Stack size 176 bytes, tasktimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = TaskRec2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YBRestart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTemperature
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET8563
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUpOrderData
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNetKeepalive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNetCheckClose
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[2e1]"></a>DelayNS</STRONG> (ARM, 44 bytes, Stack size 0 bytes, taskanalysis.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>FStudyAlg</STRONG> (ARM, 28148 bytes, Stack size 104 bytes, taskanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = FStudyAlg &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFendu
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via BLX)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4
</UL>

<P><STRONG><a name="[110]"></a>FCptDefaultVehTpye</STRONG> (ARM, 324 bytes, Stack size 0 bytes, taskanalysis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehFilterAxleWeight0
</UL>

<P><STRONG><a name="[10e]"></a>FVehAxleWtJudge</STRONG> (ARM, 200 bytes, Stack size 8 bytes, taskanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FVehAxleWtJudge &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
</UL>

<P><STRONG><a name="[10f]"></a>FVehFilterAxleWeight0</STRONG> (ARM, 572 bytes, Stack size 72 bytes, taskanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FVehFilterAxleWeight0
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCptDefaultVehTpye
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
</UL>

<P><STRONG><a name="[111]"></a>FGetCarAxleGroupMode</STRONG> (ARM, 3736 bytes, Stack size 264 bytes, taskanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FGetCarAxleGroupMode &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
</UL>

<P><STRONG><a name="[112]"></a>SevenAxleCtl</STRONG> (ARM, 1060 bytes, Stack size 32 bytes, taskanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SevenAxleCtl &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
</UL>

<P><STRONG><a name="[113]"></a>FPreDeal</STRONG> (ARM, 9308 bytes, Stack size 360 bytes, taskanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = FPreDeal &rArr; UnionWgtFunction &rArr; DetailedUnionWgtAlg &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnionWgtFunction
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenAxleCtl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetCarAxleGroupMode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehFilterAxleWeight0
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehAxleWtJudge
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCptDefaultVehTpye
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFendu
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4
</UL>

<P><STRONG><a name="[10]"></a>TaskRec4</STRONG> (ARM, 1080 bytes, Stack size 24 bytes, taskanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = TaskRec4 &rArr; FPreDeal &rArr; UnionWgtFunction &rArr; DetailedUnionWgtAlg &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToProtocolBuff
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FStudyAlg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>FVehAxleCnt1to2</STRONG> (ARM, 160 bytes, Stack size 8 bytes, taskanalysis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[2e2]"></a>FVehAxleCnt0to2</STRONG> (ARM, 164 bytes, Stack size 0 bytes, taskanalysis.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>SelectZT4AxleDisCal</STRONG> (ARM, 844 bytes, Stack size 64 bytes, taskanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SelectZT4AxleDisCal
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
</UL>

<P><STRONG><a name="[11]"></a>TaskRec6</STRONG> (ARM, 126612 bytes, Stack size 4672 bytes, taskanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4952 + Unknown Stack Size
<LI>Call Chain = TaskRec6 &rArr; FPostVehForLoop &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildNewVeh
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectZT4AxleDisCal
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[2e3]"></a>intersect</STRONG> (ARM, 180 bytes, Stack size 28 bytes, taskanalysis.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>FCompJDLen</STRONG> (ARM, 264 bytes, Stack size 24 bytes, taskanalysis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[11c]"></a>getjdlen</STRONG> (ARM, 140 bytes, Stack size 56 bytes, taskanalysis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RootFloat
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[18]"></a>TaskRecWave</STRONG> (ARM, 6976 bytes, Stack size 24 bytes, taskwave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = TaskRecWave &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[2e4]"></a>GetCmdInBuf</STRONG> (ARM, 132 bytes, Stack size 0 bytes, taskprotocol.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>ToProtocolBuff</STRONG> (ARM, 196 bytes, Stack size 8 bytes, taskprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = ToProtocolBuff &rArr; FSave39ToSD &rArr; SD_WriteBlock &rArr; SdHal_WaitBusy &rArr; SdCmd_Send_Status &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff_FXC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff0ForBD
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff0
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave39ToSD
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDCheckAntiShake
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4
</UL>

<P><STRONG><a name="[b1]"></a>FSendCmd2PC_ZONG</STRONG> (ARM, 112 bytes, Stack size 16 bytes, taskprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = FSendCmd2PC_ZONG &rArr; SendCommandToPC0 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC_FXC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[127]"></a>FProcessCmd_ZONG</STRONG> (ARM, 184 bytes, Stack size 8 bytes, taskprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = FProcessCmd_ZONG &rArr; WJJD_ProcessCmd &rArr; FAnalyResendData &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
</UL>

<P><STRONG><a name="[2e5]"></a>ExecutePCCommand</STRONG> (ARM, 16 bytes, Stack size 0 bytes, taskprotocol.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>CommondToPC</STRONG> (ARM, 16 bytes, Stack size 0 bytes, taskprotocol.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>TaskRec7</STRONG> (ARM, 3788 bytes, Stack size 40 bytes, taskprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = TaskRec7 &rArr; FProcessCmd_ZONG &rArr; WJJD_ProcessCmd &rArr; FAnalyResendData &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U5SendBytes
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendHeartbeat_FXC
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendHeartbeat
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJudgeUpdate_FXC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJudgeUpdate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProcessCmd_ZONG
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2SendBytes
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataNet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReConnect
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[2e7]"></a>F_FindZTCount</STRONG> (ARM, 80 bytes, Stack size 0 bytes, taskprotocol.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>Task_Laser_Interact</STRONG> (ARM, 9936 bytes, Stack size 96 bytes, task_laser_interact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Task_Laser_Interact &rArr; FVehXieZouStatus &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataNet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReConnect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehXieZouStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>TaskDebugInfo</STRONG> (ARM, 420 bytes, Stack size 24 bytes, taskdebuginfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = TaskDebugInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U1SendBytes
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>FSDFormWaveCtx</STRONG> (ARM, 288 bytes, Stack size 8 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSDFormWaveCtx
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[132]"></a>FSDFormWaveBuf</STRONG> (ARM, 248 bytes, Stack size 32 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSDFormWaveBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[138]"></a>FCheckSD</STRONG> (ARM, 116 bytes, Stack size 8 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCheckSD
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDNewCardInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnVehIx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnLogIx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnWaveIx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnJDIx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[133]"></a>FSDFormLogBuf</STRONG> (ARM, 128 bytes, Stack size 24 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSDFormLogBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[13d]"></a>FSDFormLogCtx</STRONG> (ARM, 288 bytes, Stack size 8 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSDFormLogCtx
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnVehIx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnLogIx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnWaveIx
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[134]"></a>FSDFormVehBuf</STRONG> (ARM, 128 bytes, Stack size 24 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSDFormVehBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[145]"></a>FSDFormVehCtx</STRONG> (ARM, 288 bytes, Stack size 8 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSDFormVehCtx
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[144]"></a>FSDFormOffnetCtx</STRONG> (ARM, 492 bytes, Stack size 0 bytes, tasksdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[135]"></a>FSDFormOffnetBuf</STRONG> (ARM, 256 bytes, Stack size 32 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSDFormOffnetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[139]"></a>FSDFormJDCtx</STRONG> (ARM, 288 bytes, Stack size 8 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSDFormJDCtx
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnJDIx
</UL>

<P><STRONG><a name="[136]"></a>FSysnJDIx</STRONG> (ARM, 388 bytes, Stack size 24 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = FSysnJDIx &rArr; SD_WriteBlock &rArr; SdHal_WaitBusy &rArr; SdCmd_Send_Status &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormJDCtx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckSD
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[13c]"></a>FSysnWaveIx</STRONG> (ARM, 388 bytes, Stack size 24 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = FSysnWaveIx &rArr; SD_WriteBlock &rArr; SdHal_WaitBusy &rArr; SdCmd_Send_Status &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormLogCtx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckSD
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[13e]"></a>FSysnLogIx</STRONG> (ARM, 488 bytes, Stack size 24 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = FSysnLogIx &rArr; SD_WriteBlock &rArr; SdHal_WaitBusy &rArr; SdCmd_Send_Status &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormLogCtx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckSD
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[13f]"></a>FSysnVehIx</STRONG> (ARM, 388 bytes, Stack size 24 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = FSysnVehIx &rArr; SD_WriteBlock &rArr; SdHal_WaitBusy &rArr; SdCmd_Send_Status &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormLogCtx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckSD
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[11f]"></a>FSDCheckAntiShake</STRONG> (ARM, 92 bytes, Stack size 24 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSDCheckAntiShake
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_CheckCard
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToProtocolBuff
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
</UL>

<P><STRONG><a name="[141]"></a>FSDCptAddr</STRONG> (ARM, 1492 bytes, Stack size 32 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSDCptAddr &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDNewCardInit
</UL>

<P><STRONG><a name="[142]"></a>FSDNewCardInit</STRONG> (ARM, 172 bytes, Stack size 16 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = FSDNewCardInit &rArr; SD_WriteBlock &rArr; SdHal_WaitBusy &rArr; SdCmd_Send_Status &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDCptAddr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckSD
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[17]"></a>TaskSDCard</STRONG> (ARM, 8788 bytes, Stack size 160 bytes, tasksdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = TaskSDCard &rArr; FJD68ToSaveSend &rArr; FGetLastSaveNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_CheckCard
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDInfToSaveSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD68ToSaveSend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD62ToSaveSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD61ToSaveSend
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDNewCardInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnVehIx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnLogIx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnWaveIx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnJDIx
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormOffnetBuf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormOffnetCtx
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormVehCtx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormVehBuf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormLogCtx
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormLogBuf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckSD
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormWaveBuf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormWaveCtx
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDCheckAntiShake
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET8563
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadC256
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataNet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>FTransLocation</STRONG> (ARM, 312 bytes, Stack size 24 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FTransLocation &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCurAxleOrPreVeh
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchSecondRow
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHaveFlag
</UL>

<P><STRONG><a name="[2e8]"></a>FTransLocationInvers</STRONG> (ARM, 60 bytes, Stack size 0 bytes, wt_task_looplogicfunction.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>FPostVehForLoop</STRONG> (ARM, 24096 bytes, Stack size 152 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = FPostVehForLoop &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FInitVehStr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCurAxleOrPreVeh
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForAbNormal
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForNormal
</UL>

<P><STRONG><a name="[14b]"></a>ColumInit</STRONG> (ARM, 56 bytes, Stack size 16 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveColumElem
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInitSolo
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveAndInitColum
</UL>

<P><STRONG><a name="[14c]"></a>ColumInitSolo</STRONG> (ARM, 192 bytes, Stack size 24 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = ColumInitSolo &rArr; ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstRowZT
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
</UL>

<P><STRONG><a name="[14d]"></a>MoveColumElem</STRONG> (ARM, 312 bytes, Stack size 32 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MoveColumElem &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindColumEnd
</UL>

<P><STRONG><a name="[158]"></a>MoveWonder</STRONG> (ARM, 72 bytes, Stack size 16 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MoveWonder
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWonderColumMatch
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
</UL>

<P><STRONG><a name="[c0]"></a>MoveAndInitWonder</STRONG> (ARM, 100 bytes, Stack size 0 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum
</UL>

<P><STRONG><a name="[157]"></a>FindWonderEnd</STRONG> (ARM, 56 bytes, Stack size 0 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWonderColumMatch
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
</UL>

<P><STRONG><a name="[14e]"></a>FindColumEnd</STRONG> (ARM, 144 bytes, Stack size 24 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = FindColumEnd &rArr; MoveColumElem &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveColumElem
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchSecondRow
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
</UL>

<P><STRONG><a name="[c1]"></a>MoveAndInitColum</STRONG> (ARM, 116 bytes, Stack size 16 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = MoveAndInitColum &rArr; ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum
</UL>

<P><STRONG><a name="[150]"></a>FSymmetricalOrNot</STRONG> (ARM, 384 bytes, Stack size 32 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSymmetricalOrNot
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpanColumnTimeMatch
</UL>

<P><STRONG><a name="[14f]"></a>SpanColumnTimeMatch</STRONG> (ARM, 136672 bytes, Stack size 96 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SpanColumnTimeMatch &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSymmetricalOrNot
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
</UL>

<P><STRONG><a name="[151]"></a>FPassThrColumMatch</STRONG> (ARM, 5876 bytes, Stack size 88 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = FPassThrColumMatch &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
</UL>

<P><STRONG><a name="[152]"></a>FMidTimeMatch</STRONG> (ARM, 24236 bytes, Stack size 88 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FMidTimeMatch &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
</UL>

<P><STRONG><a name="[153]"></a>FDiffTimeMatch</STRONG> (ARM, 11432 bytes, Stack size 24 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FDiffTimeMatch &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedMatchRule
</UL>

<P><STRONG><a name="[154]"></a>FindFirstRowZT</STRONG> (ARM, 4088 bytes, Stack size 96 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = FindFirstRowZT &rArr; ColumInitSolo &rArr; ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInitSolo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedMatchRule
</UL>

<P><STRONG><a name="[155]"></a>DetailedMatchRule</STRONG> (ARM, 9248 bytes, Stack size 216 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = DetailedMatchRule &rArr; FindFirstRowZT &rArr; ColumInitSolo &rArr; ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstRowZT
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDiffTimeMatch
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
</UL>

<P><STRONG><a name="[b4]"></a>FindWaitingForMatchColumNum</STRONG> (ARM, 136 bytes, Stack size 20 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FindWaitingForMatchColumNum
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForNormal
</UL>

<P><STRONG><a name="[156]"></a>FMatchRuleFunc</STRONG> (ARM, 32160 bytes, Stack size 296 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = FMatchRuleFunc &rArr; DetailedMatchRule &rArr; FindFirstRowZT &rArr; ColumInitSolo &rArr; ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedMatchRule
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDiffTimeMatch
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMidTimeMatch
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPassThrColumMatch
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpanColumnTimeMatch
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSymmetricalOrNot
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindColumEnd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWonderEnd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveWonder
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
</UL>

<P><STRONG><a name="[b8]"></a>F_FindVehEnd</STRONG> (ARM, 108 bytes, Stack size 12 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = F_FindVehEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProPostAxle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCurAxleOrPreVeh
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForAbNormal
</UL>

<P><STRONG><a name="[159]"></a>FindCurAxleOrPreVeh</STRONG> (ARM, 784 bytes, Stack size 56 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = FindCurAxleOrPreVeh &rArr; FPostVehForLoop &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_FindVehEnd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTransLocation
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
</UL>

<P><STRONG><a name="[d4]"></a>FMatchFristRow</STRONG> (ARM, 6892 bytes, Stack size 176 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = FMatchFristRow &rArr; FMatchRuleFunc &rArr; DetailedMatchRule &rArr; FindFirstRowZT &rArr; ColumInitSolo &rArr; ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCurAxleOrPreVeh
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindColumEnd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWonderEnd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveWonder
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTransLocation
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[d6]"></a>FMatchSecondRow</STRONG> (ARM, 9360 bytes, Stack size 152 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = FMatchSecondRow &rArr; FMatchRuleFunc &rArr; DetailedMatchRule &rArr; FindFirstRowZT &rArr; ColumInitSolo &rArr; ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindColumEnd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWonderEnd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveWonder
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTransLocation
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[15a]"></a>FindWonderColumMatch</STRONG> (ARM, 924 bytes, Stack size 48 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = FindWonderColumMatch &rArr; MoveWonder
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWonderEnd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveWonder
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
</UL>

<P><STRONG><a name="[d3]"></a>FMatchThirdRow</STRONG> (ARM, 8672 bytes, Stack size 176 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = FMatchThirdRow &rArr; FMatchRuleFunc &rArr; DetailedMatchRule &rArr; FindFirstRowZT &rArr; ColumInitSolo &rArr; ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWonderColumMatch
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindColumEnd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWonderEnd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveWonder
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTransLocation
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[15b]"></a>FProPostAxle</STRONG> (ARM, 1084 bytes, Stack size 88 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = FProPostAxle &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_FindVehEnd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildNewVeh
</UL>

<P><STRONG><a name="[15d]"></a>F_FindEnd8</STRONG> (ARM, 124 bytes, Stack size 12 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = F_FindEnd8
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildNewVeh
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
</UL>

<P><STRONG><a name="[15c]"></a>FMatchAxleAndAxle</STRONG> (ARM, 24092 bytes, Stack size 184 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = FMatchAxleAndAxle &rArr; FPostVehForLoop &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_FindEnd8
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProPostAxle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveWonder
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInitSolo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveAndInitWonder
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveAndInitColum
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FInitVehStr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
</UL>

<P><STRONG><a name="[db]"></a>FMatchColumAndCloum</STRONG> (ARM, 21700 bytes, Stack size 208 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + Unknown Stack Size
<LI>Call Chain = FMatchColumAndCloum &rArr; FMatchRuleFunc &rArr; DetailedMatchRule &rArr; FindFirstRowZT &rArr; ColumInitSolo &rArr; ColumInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_FindEnd8
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInitSolo
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWaitingForMatchColumNum
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[15e]"></a>FWheelBelongPost</STRONG> (ARM, 14504 bytes, Stack size 72 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FWheelBelongPost &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideSecondRow
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideFristRow
</UL>

<P><STRONG><a name="[d8]"></a>FMatchHideFristRow</STRONG> (ARM, 716 bytes, Stack size 64 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = FMatchHideFristRow &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWheelBelongPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[160]"></a>FMatchWheel2Axle</STRONG> (ARM, 10460 bytes, Stack size 32 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMatchWheel2Axle
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFristRowMtchWheel
</UL>

<P><STRONG><a name="[15f]"></a>FindFristRowMtchWheel</STRONG> (ARM, 2736 bytes, Stack size 64 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FindFristRowMtchWheel &rArr; FMatchWheel2Axle
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchWheel2Axle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideSecondRow
</UL>

<P><STRONG><a name="[d7]"></a>FMatchHideSecondRow</STRONG> (ARM, 53556 bytes, Stack size 160 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = FMatchHideSecondRow &rArr; FindFristRowMtchWheel &rArr; FMatchWheel2Axle
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFristRowMtchWheel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWheelBelongPost
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FInitVehStr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[2e9]"></a>FZTWaveCoincideDegre</STRONG> (ARM, 7736 bytes, Stack size 24 bytes, wt_task_looplogicfunction.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>FZTWheelCnt</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[d1]"></a>FZTMatch2Whel</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[2ea]"></a>FChangX2Line</STRONG> (ARM, 76 bytes, Stack size 12 bytes, wt_task_looplogicfunction.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>FWheelSearch4AxleZT</STRONG> (ARM, 3456 bytes, Stack size 96 bytes, wt_task_looplogicfunction.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[d9]"></a>FHideZTPostAxle</STRONG> (ARM, 2036 bytes, Stack size 40 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FHideZTPostAxle &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[da]"></a>FHideZTPostVehForNormal</STRONG> (ARM, 10012 bytes, Stack size 48 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FHideZTPostVehForNormal &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FInitVehStr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[162]"></a>DetailedUnionWgtAlg</STRONG> (ARM, 16660 bytes, Stack size 872 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = DetailedUnionWgtAlg &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnionWgtFunction
</UL>

<P><STRONG><a name="[114]"></a>UnionWgtFunction</STRONG> (ARM, 3344 bytes, Stack size 200 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = UnionWgtFunction &rArr; DetailedUnionWgtAlg &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedUnionWgtAlg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
</UL>

<P><STRONG><a name="[d5]"></a>SpeedMatchSecondRow</STRONG> (ARM, 1712 bytes, Stack size 80 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SpeedMatchSecondRow &rArr; FindColumEnd &rArr; MoveColumElem &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindColumEnd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTransLocation
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[d2]"></a>SpeedMatchThirdRow</STRONG> (ARM, 4792 bytes, Stack size 104 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = SpeedMatchThirdRow &rArr; FindColumEnd &rArr; MoveColumElem &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindColumEnd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWonderEnd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveWonder
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTransLocation
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
</UL>

<P><STRONG><a name="[11a]"></a>BuildNewVeh</STRONG> (ARM, 476 bytes, Stack size 48 bytes, wt_task_looplogicfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = BuildNewVeh &rArr; FProPostAxle &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_FindEnd8
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProPostAxle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
</UL>

<P><STRONG><a name="[164]"></a>FJDJudgeVehType</STRONG> (ARM, 292 bytes, Stack size 16 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FJDJudgeVehType
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDVehType
</UL>

<P><STRONG><a name="[163]"></a>FJDVehType</STRONG> (ARM, 744 bytes, Stack size 28 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FJDVehType &rArr; FJDJudgeVehType
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDJudgeVehType
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
</UL>

<P><STRONG><a name="[115]"></a>FJDProcess</STRONG> (ARM, 6876 bytes, Stack size 192 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = FJDProcess &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDVehType
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4
</UL>

<P><STRONG><a name="[16c]"></a>FSave01ToTDC</STRONG> (ARM, 124 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FSave01ToTDC &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend01Info
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDInfToSaveSend
</UL>

<P><STRONG><a name="[16d]"></a>FGetPreYearNum</STRONG> (ARM, 300 bytes, Stack size 40 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSaveNumFromDate
</UL>

<P><STRONG><a name="[16e]"></a>FGetSaveNumFromDate</STRONG> (ARM, 724 bytes, Stack size 64 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetPreYearNum
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetNextSDNum
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetLastSaveNum
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDateFromNum
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDInfToSaveSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD68ToSaveSend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD62ToSaveSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD61ToSaveSend
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAnalyResendData
</UL>

<P><STRONG><a name="[16f]"></a>FGetDateFromNum</STRONG> (ARM, 572 bytes, Stack size 56 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSaveNumFromDate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDaysOneMon
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDaysOneYear
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSenddata
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend01Info
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetNextSDNum
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetLastSaveNum
</UL>

<P><STRONG><a name="[170]"></a>FGetLastSaveNum</STRONG> (ARM, 736 bytes, Stack size 56 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = FGetLastSaveNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDateFromNum
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSaveNumFromDate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIsRunYear
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDifference
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJudgeDifference
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDInfToSaveSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD68ToSaveSend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD62ToSaveSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD61ToSaveSend
</UL>

<P><STRONG><a name="[172]"></a>FChangLaneToBG</STRONG> (ARM, 548 bytes, Stack size 0 bytes, jdprocess.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSendDataForErr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDInfToSaveSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD68ToSaveSend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD62ToSaveSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD61ToSaveSend
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave39ToSD
</UL>

<P><STRONG><a name="[171]"></a>FTime_Process</STRONG> (ARM, 548 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FTime_Process &rArr; FIsRunYear &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIsRunYear
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDInfToSaveSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD68ToSaveSend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD62ToSaveSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD61ToSaveSend
</UL>

<P><STRONG><a name="[147]"></a>FJDInfToSaveSend</STRONG> (ARM, 7712 bytes, Stack size 328 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = FJDInfToSaveSend &rArr; FGetLastSaveNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTime_Process
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FChangLaneToBG
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetLastSaveNum
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSaveNumFromDate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave01ToTDC
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[f5]"></a>FRead01FromTDC</STRONG> (ARM, 124 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FRead01FromTDC &rArr; ReadC256 &rArr; I2C1_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadC256
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
</UL>

<P><STRONG><a name="[173]"></a>FGetSendDataForErr</STRONG> (ARM, 2820 bytes, Stack size 52 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FGetSendDataForErr
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FChangLaneToBG
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSenddata
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend01Info
</UL>

<P><STRONG><a name="[178]"></a>FCheckSendData</STRONG> (ARM, 140 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCheckSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSenddata
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend01Info
</UL>

<P><STRONG><a name="[174]"></a>FGetNextSDNum</STRONG> (ARM, 628 bytes, Stack size 64 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = FGetNextSDNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDateFromNum
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSaveNumFromDate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIsRunYear
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSenddata
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend01Info
</UL>

<P><STRONG><a name="[175]"></a>FJudgeDifference</STRONG> (ARM, 64 bytes, Stack size 24 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = FJudgeDifference &rArr; FGetLastSaveNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetLastSaveNum
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend01Info
</UL>

<P><STRONG><a name="[176]"></a>FGetDifference</STRONG> (ARM, 116 bytes, Stack size 24 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = FGetDifference &rArr; FGetLastSaveNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetLastSaveNum
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend01Info
</UL>

<P><STRONG><a name="[177]"></a>FSend01Info</STRONG> (ARM, 764 bytes, Stack size 576 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = FSend01Info &rArr; FGetDifference &rArr; FGetLastSaveNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDifference
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJudgeDifference
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetNextSDNum
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckSendData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSendDataForErr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDateFromNum
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave01ToTDC
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
</UL>

<P><STRONG><a name="[262]"></a>FCheckDeviceID</STRONG> (ARM, 68 bytes, Stack size 0 bytes, jdprocess.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
</UL>

<P><STRONG><a name="[179]"></a>FSave39ToTDC</STRONG> (ARM, 124 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FSave39ToTDC &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend39Info
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave39ToSD
</UL>

<P><STRONG><a name="[120]"></a>FSave39ToSD</STRONG> (ARM, 1316 bytes, Stack size 96 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = FSave39ToSD &rArr; SD_WriteBlock &rArr; SdHal_WaitBusy &rArr; SdCmd_Send_Status &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave39ToTDC
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FChangLaneToBG
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToProtocolBuff
</UL>

<P><STRONG><a name="[f6]"></a>FRead39FromTDC</STRONG> (ARM, 124 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FRead39FromTDC &rArr; ReadC256 &rArr; I2C1_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadC256
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
</UL>

<P><STRONG><a name="[17b]"></a>FGet39OrderForErr</STRONG> (ARM, 904 bytes, Stack size 20 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FGet39OrderForErr
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSend39data
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend39Info
</UL>

<P><STRONG><a name="[17a]"></a>FSend39Info</STRONG> (ARM, 1524 bytes, Stack size 1608 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1724<LI>Call Chain = FSend39Info &rArr; SD_ReadBlock &rArr; SdCmd_Read_Single_Block &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGet39OrderForErr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave39ToTDC
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
</UL>

<P><STRONG><a name="[17c]"></a>FSave68ToTDC</STRONG> (ARM, 124 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FSave68ToTDC &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD68ToSaveSend
</UL>

<P><STRONG><a name="[17d]"></a>FSave62ToTDC</STRONG> (ARM, 124 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FSave62ToTDC &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD62ToSaveSend
</UL>

<P><STRONG><a name="[17e]"></a>FSave61ToTDC</STRONG> (ARM, 124 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FSave61ToTDC &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD61ToSaveSend
</UL>

<P><STRONG><a name="[17f]"></a>FSend6FInfo</STRONG> (ARM, 1548 bytes, Stack size 592 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = FSend6FInfo &rArr; FGetDifference &rArr; FGetLastSaveNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave61ToTDC
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave62ToTDC
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave68ToTDC
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDifference
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJudgeDifference
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetNextSDNum
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckSendData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSendDataForErr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDateFromNum
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
</UL>

<P><STRONG><a name="[f7]"></a>FRead61FromTDC</STRONG> (ARM, 124 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FRead61FromTDC &rArr; ReadC256 &rArr; I2C1_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadC256
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
</UL>

<P><STRONG><a name="[f8]"></a>FRead62FromTDC</STRONG> (ARM, 124 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FRead62FromTDC &rArr; ReadC256 &rArr; I2C1_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadC256
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
</UL>

<P><STRONG><a name="[f9]"></a>FRead68FromTDC</STRONG> (ARM, 124 bytes, Stack size 8 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FRead68FromTDC &rArr; ReadC256 &rArr; I2C1_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadC256
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
</UL>

<P><STRONG><a name="[148]"></a>FJD61ToSaveSend</STRONG> (ARM, 1844 bytes, Stack size 584 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = FJD61ToSaveSend &rArr; FGetLastSaveNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave61ToTDC
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTime_Process
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FChangLaneToBG
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetLastSaveNum
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSaveNumFromDate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[149]"></a>FJD62ToSaveSend</STRONG> (ARM, 1428 bytes, Stack size 584 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = FJD62ToSaveSend &rArr; FGetLastSaveNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave62ToTDC
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTime_Process
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FChangLaneToBG
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetLastSaveNum
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSaveNumFromDate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[14a]"></a>FJD68ToSaveSend</STRONG> (ARM, 1904 bytes, Stack size 584 bytes, jdprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = FJD68ToSaveSend &rArr; FGetLastSaveNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave68ToTDC
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTime_Process
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FChangLaneToBG
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetLastSaveNum
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSaveNumFromDate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
</UL>

<P><STRONG><a name="[14]"></a>TaskRec9</STRONG> (ARM, 948 bytes, Stack size 24 bytes, taskjdinf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1748 + Unknown Stack Size
<LI>Call Chain = TaskRec9 &rArr; FSend39Info &rArr; SD_ReadBlock &rArr; SdCmd_Read_Single_Block &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSenddata
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSend39data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend39Info
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend01Info
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDCheckAntiShake
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>TaskRec3</STRONG> (ARM, 1108 bytes, Stack size 8 bytes, taskkb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TaskRec3 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackGroundON
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[184]"></a>DoKey_0</STRONG> (ARM, 536 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = DoKey_0 &rArr; DisplayChedao2_Neima &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao2_Neima
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao1_Neima
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao4_Neima
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao3_Neima
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[18f]"></a>DoKey_9</STRONG> (ARM, 328 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = DoKey_9 &rArr; DisplayChange_TongDao6ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[190]"></a>DoKey_8</STRONG> (ARM, 328 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = DoKey_8 &rArr; DisplayChange_TongDao6ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[191]"></a>DoKey_7</STRONG> (ARM, 328 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = DoKey_7 &rArr; DisplayChange_TongDao6ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[192]"></a>DoKey_6</STRONG> (ARM, 380 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = DoKey_6 &rArr; DisplayChange_TongDao6ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[193]"></a>DoKey_5</STRONG> (ARM, 380 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = DoKey_5 &rArr; DisplayChange_TongDao6ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[194]"></a>DoKey_4</STRONG> (ARM, 540 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = DoKey_4 &rArr; DisplayInitLcd &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInitLcd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao4_zengyi
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[198]"></a>DoKey_3</STRONG> (ARM, 552 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = DoKey_3 &rArr; DisplayInitLcd &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao3
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInitLcd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao3_zengyi
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[19b]"></a>DoKey_2</STRONG> (ARM, 580 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = DoKey_2 &rArr; DisplayInitLcd &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao2_zengyi
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao2
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInitLcd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChooseTongdao_Chedao
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[19f]"></a>DoKey_1</STRONG> (ARM, 568 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = DoKey_1 &rArr; DisplayInitLcd &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao1_zengyi
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao1
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInitLcd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChooseChedao
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[1a3]"></a>DoKey_F12</STRONG> (ARM, 64 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DoKey_F12
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackGroundOFF
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackGroundON
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[1a5]"></a>DoKey_F11</STRONG> (ARM, 464 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = DoKey_F11 &rArr; PrintFormatDataXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormatDataXY
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[1a9]"></a>DoKey_F4</STRONG> (ARM, 88 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DoKey_F4 &rArr; DisplayProgramVersion &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayProgramVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[1ab]"></a>DoKey_F3</STRONG> (ARM, 244 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DoKey_F3 &rArr; DisplayChange_Chedao4ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao4ZY
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao3ZY
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao2ZY
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao1ZY
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[1b1]"></a>DoKey_F2</STRONG> (ARM, 52 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DoKey_F2 &rArr; DisplayChooseChedao &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChooseChedao
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[1b7]"></a>DoKey_F1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, task_ui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[1b2]"></a>DoKey_ENTER</STRONG> (ARM, 1388 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = DoKey_ENTER &rArr; Display_Chezhong &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_TongdaoZY
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chezhong
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao4
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao3
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao1
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInitLcd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[1b5]"></a>DoKey_ESC</STRONG> (ARM, 928 bytes, Stack size 8 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = DoKey_ESC &rArr; Display_Chezhong &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao2_zengyi
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao1_zengyi
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawPic
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chezhong
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao4
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao3
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao1
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInitLcd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunction
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChooseTongdao_Chedao
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChooseChedao
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao4_zengyi
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao3_zengyi
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[15]"></a>Task_UI</STRONG> (ARM, 816 bytes, Stack size 0 bytes, task_ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = Task_UI &rArr; DoKey_F11 &rArr; PrintFormatDataXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ENTER
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F1
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F3
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F11
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F12
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_3
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_5
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_6
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_7
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_8
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_9
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_0
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawPic
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chezhong
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>InitAllIRQ</STRONG> (ARM, 104 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = InitAllIRQ &rArr; StorageInit &rArr; SDCardInit &rArr; SD_Initialize &rArr; SDMMC_CalTimeout &rArr; SdCmd_Send_CSD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[100]"></a>InitAllSP</STRONG> (ARM, 56 bytes, Stack size 24 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitAllSP &rArr; UART5Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
</UL>

<P><STRONG><a name="[1c3]"></a>Delayus</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ds18b20.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSReset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
</UL>

<P><STRONG><a name="[2eb]"></a>Delayms</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ds18b20.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>ReadByte</STRONG> (ARM, 124 bytes, Stack size 8 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTemperature
</UL>

<P><STRONG><a name="[1c4]"></a>WriteByte</STRONG> (ARM, 180 bytes, Stack size 12 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTemperature
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20Init
</UL>

<P><STRONG><a name="[1c5]"></a>DSReset</STRONG> (ARM, 76 bytes, Stack size 4 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DSReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTemperature
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20Init
</UL>

<P><STRONG><a name="[108]"></a>ReadTemperature</STRONG> (ARM, 144 bytes, Stack size 12 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadTemperature &rArr; WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSReset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
</UL>

<P><STRONG><a name="[1c6]"></a>DS18B20Init</STRONG> (ARM, 52 bytes, Stack size 4 bytes, ds18b20.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSReset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
</UL>

<P><STRONG><a name="[1dc]"></a>Delay</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAInitParam
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fpga_Emc_Check
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fpga_Err_Alert
</UL>

<P><STRONG><a name="[aa]"></a>IOInit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[1ba]"></a>I2C1Init</STRONG> (ARM, 160 bytes, Stack size 24 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllIRQ
</UL>

<P><STRONG><a name="[1c7]"></a>I2C1_ReadNByte</STRONG> (ARM, 396 bytes, Stack size 32 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C1_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadC256
</UL>

<P><STRONG><a name="[1c9]"></a>I2C1_WriteNByte</STRONG> (ARM, 496 bytes, Stack size 32 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
</UL>

<P><STRONG><a name="[1bb]"></a>I2C2Init</STRONG> (ARM, 160 bytes, Stack size 24 bytes, i2c2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllIRQ
</UL>

<P><STRONG><a name="[1ca]"></a>I2C2_ReadNByte</STRONG> (ARM, 376 bytes, Stack size 40 bytes, i2c2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C2_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET8563
</UL>

<P><STRONG><a name="[1cc]"></a>I2C2_WriteNByte</STRONG> (ARM, 456 bytes, Stack size 40 bytes, i2c2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C2_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET8563
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC8563Init
</UL>

<P><STRONG><a name="[1e3]"></a>NandInit</STRONG> (ARM, 124 bytes, Stack size 0 bytes, nandflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageInit
</UL>

<P><STRONG><a name="[1cd]"></a>EraseNandBlock</STRONG> (ARM, 68 bytes, Stack size 8 bytes, nandflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBlockAddr
</UL>

<P><STRONG><a name="[1cf]"></a>ReadNandPage</STRONG> (ARM, 316 bytes, Stack size 32 bytes, nandflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNS
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageAddr
</UL>

<P><STRONG><a name="[1d2]"></a>ProgramNandPage</STRONG> (ARM, 248 bytes, Stack size 32 bytes, nandflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageAddr
</UL>

<P><STRONG><a name="[2ec]"></a>EraseNORFlash</STRONG> (ARM, 124 bytes, Stack size 0 bytes, norflash.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>EraseBlock</STRONG> (ARM, 140 bytes, Stack size 8 bytes, norflash.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>EraseSector</STRONG> (ARM, 140 bytes, Stack size 8 bytes, norflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStartupCnt
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRamToFlash
</UL>

<P><STRONG><a name="[1d4]"></a>WordProgram</STRONG> (ARM, 112 bytes, Stack size 8 bytes, norflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WordProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRamToFlash
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNORFlash
</UL>

<P><STRONG><a name="[2ee]"></a>ReadNORFlash</STRONG> (ARM, 68 bytes, Stack size 8 bytes, norflash.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>WriteNORFlash</STRONG> (ARM, 100 bytes, Stack size 32 bytes, norflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteNORFlash &rArr; WordProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStartupCnt
</UL>

<P><STRONG><a name="[1d6]"></a>SetRTC</STRONG> (ARM, 500 bytes, Stack size 12 bytes, pcf8563.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCTime
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Synchro8563
</UL>

<P><STRONG><a name="[107]"></a>GET8563</STRONG> (ARM, 368 bytes, Stack size 24 bytes, pcf8563.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GET8563 &rArr; I2C2_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Synchro8563
</UL>

<P><STRONG><a name="[1d5]"></a>Synchro8563</STRONG> (ARM, 24 bytes, Stack size 16 bytes, pcf8563.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET8563
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC8563Init
</UL>

<P><STRONG><a name="[1d7]"></a>RTC8563Init</STRONG> (ARM, 108 bytes, Stack size 16 bytes, pcf8563.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Synchro8563
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteNByte
</UL>

<P><STRONG><a name="[1d8]"></a>SET8563</STRONG> (ARM, 380 bytes, Stack size 32 bytes, pcf8563.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SET8563 &rArr; I2C2_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteNByte
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCTime
</UL>

<P><STRONG><a name="[1d9]"></a>SetRTCTime</STRONG> (ARM, 28 bytes, Stack size 8 bytes, pcf8563.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetRTCTime &rArr; SET8563 &rArr; I2C2_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET8563
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTime
</UL>

<P><STRONG><a name="[1da]"></a>GetRTCTime</STRONG> (ARM, 448 bytes, Stack size 32 bytes, pcf8563.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[143]"></a>SDCardInit</STRONG> (ARM, 228 bytes, Stack size 24 bytes, sdapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = SDCardInit &rArr; SD_Initialize &rArr; SDMMC_CalTimeout &rArr; SdCmd_Send_CSD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageInit
</UL>

<P><STRONG><a name="[1dd]"></a>ReadSDCardBlock</STRONG> (ARM, 32 bytes, Stack size 16 bytes, sdapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[1de]"></a>ReadSDCardMultiBlock</STRONG> (ARM, 40 bytes, Stack size 16 bytes, sdapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
</UL>

<P><STRONG><a name="[1e0]"></a>WriteSDCardBlock</STRONG> (ARM, 32 bytes, Stack size 16 bytes, sdapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[1e1]"></a>WriteSDCardMultiBlock</STRONG> (ARM, 40 bytes, Stack size 16 bytes, sdapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
</UL>

<P><STRONG><a name="[1bc]"></a>StorageInit</STRONG> (ARM, 16 bytes, Stack size 8 bytes, storageapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = StorageInit &rArr; SDCardInit &rArr; SD_Initialize &rArr; SDMMC_CalTimeout &rArr; SdCmd_Send_CSD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardInit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllIRQ
</UL>

<P><STRONG><a name="[1e4]"></a>SaveRamToFlash</STRONG> (ARM, 92 bytes, Stack size 16 bytes, storageapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordProgram
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>

<P><STRONG><a name="[2ef]"></a>LoadFlashToRam</STRONG> (ARM, 60 bytes, Stack size 0 bytes, storageapp.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>ReadC256</STRONG> (ARM, 44 bytes, Stack size 24 bytes, tdc256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadC256 &rArr; I2C1_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRead68FromTDC
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRead62FromTDC
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRead61FromTDC
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRead39FromTDC
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRead01FromTDC
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStartupCnt
</UL>

<P><STRONG><a name="[13b]"></a>WriteC256</STRONG> (ARM, 44 bytes, Stack size 24 bytes, tdc256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave61ToTDC
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave62ToTDC
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave68ToTDC
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave39ToTDC
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave01ToTDC
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnVehIx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnLogIx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnWaveIx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnJDIx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProModInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitJDParam
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearStartupCnt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStartupCnt
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProcessPrt
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNonWeight
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitThreshold
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNetInfo
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParams
</UL>

<P><STRONG><a name="[1b8]"></a>Time0Init</STRONG> (ARM, 148 bytes, Stack size 16 bytes, timer0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Time0Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllIRQ
</UL>

<P><STRONG><a name="[df]"></a>U2SendBytes</STRONG> (ARM, 64 bytes, Stack size 0 bytes, uart2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture
</UL>

<P><STRONG><a name="[1d]"></a>IRQ_UART2</STRONG> (ARM, 1412 bytes, Stack size 12 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IRQ_UART2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart2.o(.text)
</UL>
<P><STRONG><a name="[1bf]"></a>UART2Init</STRONG> (ARM, 376 bytes, Stack size 24 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllSP
</UL>

<P><STRONG><a name="[e0]"></a>U3SendBytes</STRONG> (ARM, 60 bytes, Stack size 0 bytes, uart3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture
</UL>

<P><STRONG><a name="[1e6]"></a>IRQ_Uart3</STRONG> (ARM, 1364 bytes, Stack size 32 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IRQ_Uart3 &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart3.o(.text)
</UL>
<P><STRONG><a name="[1c0]"></a>UART3Init</STRONG> (ARM, 400 bytes, Stack size 24 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllSP
</UL>

<P><STRONG><a name="[12f]"></a>U5SendBytes</STRONG> (ARM, 60 bytes, Stack size 0 bytes, uart5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
</UL>

<P><STRONG><a name="[2f0]"></a>U5ReciveByte</STRONG> (ARM, 184 bytes, Stack size 12 bytes, uart5.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>IRQ_UART5</STRONG> (ARM, 1380 bytes, Stack size 12 bytes, uart5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IRQ_UART5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart5.o(.text)
</UL>
<P><STRONG><a name="[1c1]"></a>UART5Init</STRONG> (ARM, 408 bytes, Stack size 24 bytes, uart5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllSP
</UL>

<P><STRONG><a name="[1e8]"></a>W5100_Delay_1MS</STRONG> (ARM, 44 bytes, Stack size 0 bytes, w5100.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Init
</UL>

<P><STRONG><a name="[103]"></a>Read_W5100</STRONG> (ARM, 16 bytes, Stack size 0 bytes, w5100.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNetSendKeepalive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNetCheckClose
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataNet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTargetSocktInfo
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Interrupt_Process
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_tx_process
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_rx_process
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
</UL>

<P><STRONG><a name="[105]"></a>Write_W5100</STRONG> (ARM, 12 bytes, Stack size 0 bytes, w5100.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNetSendKeepalive
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_W5100
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Interrupt_Process
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_tx_process
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_rx_process
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Init
</UL>

<P><STRONG><a name="[1e7]"></a>W5100_Init</STRONG> (ARM, 276 bytes, Stack size 4 bytes, w5100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = W5100_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Delay_1MS
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeW5100
</UL>

<P><STRONG><a name="[1e9]"></a>Detect_Gateway</STRONG> (ARM, 184 bytes, Stack size 8 bytes, w5100.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Delay_1MS
</UL>

<P><STRONG><a name="[1ea]"></a>Socket_Init</STRONG> (ARM, 296 bytes, Stack size 8 bytes, w5100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Socket_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeW5100
</UL>

<P><STRONG><a name="[ed]"></a>Socket_Connect</STRONG> (ARM, 108 bytes, Stack size 8 bytes, w5100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Socket_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReConnect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSocket
</UL>

<P><STRONG><a name="[ec]"></a>Socket_Listen</STRONG> (ARM, 152 bytes, Stack size 8 bytes, w5100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Socket_Listen
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJudgeUpdate_FXC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJudgeUpdate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNetKeepalive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNetCheckClose
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReConnect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSocket
</UL>

<P><STRONG><a name="[1eb]"></a>Socket_UDP</STRONG> (ARM, 92 bytes, Stack size 8 bytes, w5100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Socket_UDP
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSocket
</UL>

<P><STRONG><a name="[1ec]"></a>S_rx_process</STRONG> (ARM, 348 bytes, Stack size 24 bytes, w5100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = S_rx_process
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_W5100
</UL>

<P><STRONG><a name="[1ed]"></a>S_tx_process</STRONG> (ARM, 372 bytes, Stack size 28 bytes, w5100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = S_tx_process
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataNet
</UL>

<P><STRONG><a name="[1ee]"></a>W5100_Interrupt_Process</STRONG> (ARM, 900 bytes, Stack size 12 bytes, w5100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = W5100_Interrupt_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_W5100
</UL>

<P><STRONG><a name="[1ef]"></a>SetNetSetting</STRONG> (ARM, 32 bytes, Stack size 24 bytes, w5100app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1f0]"></a>ReadTargetSocktInfo</STRONG> (ARM, 144 bytes, Stack size 16 bytes, w5100app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>

<P><STRONG><a name="[1f2]"></a>InitNetSetting</STRONG> (ARM, 416 bytes, Stack size 0 bytes, w5100app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeW5100
</UL>

<P><STRONG><a name="[1f1]"></a>SetSocket</STRONG> (ARM, 760 bytes, Stack size 8 bytes, w5100app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSocket &rArr; Socket_Listen
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeW5100
</UL>

<P><STRONG><a name="[1f]"></a>IRQ_W5100</STRONG> (ARM, 1052 bytes, Stack size 16 bytes, w5100app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ_W5100 &rArr; S_rx_process
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Interrupt_Process
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_rx_process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100app.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>InitializeW5100</STRONG> (ARM, 176 bytes, Stack size 24 bytes, w5100app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitializeW5100 &rArr; SetSocket &rArr; Socket_Listen
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSocket
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNetSetting
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[c3]"></a>SendDataNet</STRONG> (ARM, 120 bytes, Stack size 32 bytes, w5100app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SendDataNet &rArr; S_tx_process
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_tx_process
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendHeartbeat_FXC
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendHeartbeat
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehPassStatus
</UL>

<P><STRONG><a name="[259]"></a>WDTInit</STRONG> (ARM, 120 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YBRestart
</UL>

<P><STRONG><a name="[1f3]"></a>Fpga_Err_Alert</STRONG> (ARM, 76 bytes, Stack size 16 bytes, fpga_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Fpga_Err_Alert
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAInitParam
</UL>

<P><STRONG><a name="[1f4]"></a>Fpga_Emc_Check</STRONG> (ARM, 204 bytes, Stack size 16 bytes, fpga_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Fpga_Emc_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAInitParam
</UL>

<P><STRONG><a name="[20]"></a>IRQ_FPGA</STRONG> (ARM, 15624 bytes, Stack size 48 bytes, fpga_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IRQ_FPGA &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fpga_app.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>FPGAInitParam</STRONG> (ARM, 736 bytes, Stack size 24 bytes, fpga_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FPGAInitParam &rArr; Fpga_Emc_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fpga_Emc_Check
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fpga_Err_Alert
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[2f1]"></a>Read_Fpga_Status</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fpga_app.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>FPGA_Temperature</STRONG> (ARM, 152 bytes, Stack size 24 bytes, fpga_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[131]"></a>U1SendBytes</STRONG> (ARM, 48 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDebugInfo
</UL>

<P><STRONG><a name="[1f8]"></a>sendchar</STRONG> (ARM, 36 bytes, Stack size 12 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U1SendBytes
</UL>

<P><STRONG><a name="[1f9]"></a>IRQ_UART1</STRONG> (ARM, 308 bytes, Stack size 0 bytes, uart1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart1.o(.text)
</UL>
<P><STRONG><a name="[1be]"></a>UART1Init</STRONG> (ARM, 364 bytes, Stack size 24 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllSP
</UL>

<P><STRONG><a name="[1b9]"></a>Time1Init</STRONG> (ARM, 72 bytes, Stack size 0 bytes, timer1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllIRQ
</UL>

<P><STRONG><a name="[182]"></a>KeyboardInit</STRONG> (ARM, 108 bytes, Stack size 16 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeyboardInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec3
</UL>

<P><STRONG><a name="[1fd]"></a>Enter</STRONG> (ARM, 68 bytes, Stack size 0 bytes, lcdapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
</UL>

<P><STRONG><a name="[1fb]"></a>PrintChar</STRONG> (ARM, 212 bytes, Stack size 16 bytes, lcdapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_hz
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString8_16A
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplay
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormatData
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormatDataXY
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
</UL>

<P><STRONG><a name="[1a8]"></a>PrintFormatDataXY</STRONG> (ARM, 116 bytes, Stack size 280 bytes, lcdapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = PrintFormatDataXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F11
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLineModify
</UL>

<P><STRONG><a name="[200]"></a>DrawLineModify</STRONG> (ARM, 232 bytes, Stack size 24 bytes, lcdapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Point
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormatDataXY
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[183]"></a>BackGroundON</STRONG> (ARM, 28 bytes, Stack size 0 bytes, lcdapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F12
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec3
</UL>

<P><STRONG><a name="[1a4]"></a>BackGroundOFF</STRONG> (ARM, 28 bytes, Stack size 0 bytes, lcdapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F12
</UL>

<P><STRONG><a name="[2f2]"></a>CheckOutBGStatus</STRONG> (ARM, 68 bytes, Stack size 0 bytes, lcdapp.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>BackGroundReverse</STRONG> (ARM, 68 bytes, Stack size 0 bytes, lcdapp.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>BackGroundSave</STRONG> (ARM, 20 bytes, Stack size 0 bytes, lcdapp.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>BackGroundRecover</STRONG> (ARM, 64 bytes, Stack size 0 bytes, lcdapp.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>GotoXY</STRONG> (ARM, 68 bytes, Stack size 0 bytes, lcdapp.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>PrintCharXY</STRONG> (ARM, 44 bytes, Stack size 16 bytes, lcdapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao2_zengyi
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao2_Neima
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao1_zengyi
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao1_Neima
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao4ZY
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao3ZY
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao2ZY
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao1ZY
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F11
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chezhong
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao4
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao3
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao1
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayProgramVersion
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInitLcd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunction
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChooseTongdao_Chedao
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChooseChedao
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao4_zengyi
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao4_Neima
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao3_zengyi
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao3_Neima
</UL>

<P><STRONG><a name="[203]"></a>PrintFormatData</STRONG> (ARM, 88 bytes, Stack size 48 bytes, lcdapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>

<P><STRONG><a name="[204]"></a>LCDDisplay</STRONG> (ARM, 72 bytes, Stack size 56 bytes, lcdapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>

<P><STRONG><a name="[1b6]"></a>DrawPic</STRONG> (ARM, 36 bytes, Stack size 8 bytes, lcdapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DrawPic &rArr; GUI_LoadPic &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LoadPic
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[1bd]"></a>LCDInit</STRONG> (ARM, 188 bytes, Stack size 8 bytes, lcdapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCDInit &rArr; GUI_Initialize &rArr; GUI_FillSCR &rArr; LCD_FillAll &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Initialize
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllIRQ
</UL>

<P><STRONG><a name="[208]"></a>SdCmd_Go_Idle_State</STRONG> (ARM, 44 bytes, Stack size 16 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SdCmd_Go_Idle_State &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[20a]"></a>SdCmd_Send_OP_Cond</STRONG> (ARM, 136 bytes, Stack size 32 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SdCmd_Send_OP_Cond &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_IdentifyCard
</UL>

<P><STRONG><a name="[20b]"></a>SD_CheckSDVersion</STRONG> (ARM, 108 bytes, Stack size 40 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SD_CheckSDVersion &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[20c]"></a>SdCmd_Send_ACMD</STRONG> (ARM, 124 bytes, Stack size 32 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SdCmd_Send_ACMD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Set_Bus_Width
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_SD_App_OP_Cond
</UL>

<P><STRONG><a name="[20d]"></a>SdCmd_SD_App_OP_Cond</STRONG> (ARM, 164 bytes, Stack size 32 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SdCmd_SD_App_OP_Cond &rArr; SdCmd_Send_ACMD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Send_ACMD
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_IdentifyCard
</UL>

<P><STRONG><a name="[20e]"></a>SdCmd_All_Send_CID</STRONG> (ARM, 160 bytes, Stack size 48 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SdCmd_All_Send_CID &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;word_to_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[210]"></a>SdCmd_Set_Relative_Addr</STRONG> (ARM, 180 bytes, Stack size 32 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SdCmd_Set_Relative_Addr &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[211]"></a>SdCmd_Send_CSD</STRONG> (ARM, 160 bytes, Stack size 48 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SdCmd_Send_CSD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;word_to_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCardInfo
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CalTimeout
</UL>

<P><STRONG><a name="[212]"></a>SdCmd_Select_Card</STRONG> (ARM, 72 bytes, Stack size 24 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SdCmd_Select_Card &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigCard
</UL>

<P><STRONG><a name="[213]"></a>SdCmd_Deselect_Card</STRONG> (ARM, 76 bytes, Stack size 32 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SdCmd_Deselect_Card &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigCard
</UL>

<P><STRONG><a name="[214]"></a>SdCmd_Stop_Transmission</STRONG> (ARM, 72 bytes, Stack size 24 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
</UL>

<P><STRONG><a name="[215]"></a>SdCmd_Send_Status</STRONG> (ARM, 84 bytes, Stack size 32 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SdCmd_Send_Status &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_WaitBusy
</UL>

<P><STRONG><a name="[216]"></a>SdCmd_Go_Inactive_State</STRONG> (ARM, 72 bytes, Stack size 24 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>

<P><STRONG><a name="[217]"></a>SdCmd_Set_BlockLen</STRONG> (ARM, 120 bytes, Stack size 32 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SdCmd_Set_BlockLen &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigCard
</UL>

<P><STRONG><a name="[218]"></a>SdCmd_Set_Bus_Width</STRONG> (ARM, 168 bytes, Stack size 32 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SdCmd_Set_Bus_Width &rArr; SdCmd_Send_ACMD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Send_ACMD
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigCard
</UL>

<P><STRONG><a name="[219]"></a>SdCmd_Read_Single_Block</STRONG> (ARM, 136 bytes, Stack size 32 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SdCmd_Read_Single_Block &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[21a]"></a>SdCmd_Read_Multiple_Block</STRONG> (ARM, 136 bytes, Stack size 32 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
</UL>

<P><STRONG><a name="[21b]"></a>SdCmd_Write_Single_Block</STRONG> (ARM, 136 bytes, Stack size 32 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SdCmd_Write_Single_Block &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[21c]"></a>SdCmd_Write_Multiple_Block</STRONG> (ARM, 136 bytes, Stack size 32 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
</UL>

<P><STRONG><a name="[21d]"></a>SdCmd_Erase_Wr_Blk_Start</STRONG> (ARM, 204 bytes, Stack size 32 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[21e]"></a>SdCmd_Erase_Wr_Blk_End</STRONG> (ARM, 204 bytes, Stack size 32 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[21f]"></a>SdCmd_Erase</STRONG> (ARM, 108 bytes, Stack size 32 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_WaitBusy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[22b]"></a>SD_ReleaseOSSem</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sddriver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[221]"></a>SDMMC_ConfigCard</STRONG> (ARM, 208 bytes, Stack size 16 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SDMMC_ConfigCard &rArr; SdCmd_Set_Bus_Width &rArr; SdCmd_Send_ACMD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_OpenDrainCmd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_EnableMCIBusWidth
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Set_Bus_Width
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Set_BlockLen
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Deselect_Card
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Select_Card
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[224]"></a>SDMMC_CalTimeout</STRONG> (ARM, 452 bytes, Stack size 56 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = SDMMC_CalTimeout &rArr; SdCmd_Send_CSD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Send_CSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[225]"></a>SDMMC_GetCardInfo</STRONG> (ARM, 344 bytes, Stack size 32 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = SDMMC_GetCardInfo &rArr; SdCmd_Send_CSD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Send_CSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[226]"></a>SD_Ver2ActiveInit</STRONG> (ARM, 228 bytes, Stack size 40 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SD_Ver2ActiveInit &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[227]"></a>SDMMC_IdentifyCard</STRONG> (ARM, 84 bytes, Stack size 8 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SDMMC_IdentifyCard &rArr; SdCmd_SD_App_OP_Cond &rArr; SdCmd_Send_ACMD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_SD_App_OP_Cond
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Send_OP_Cond
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[228]"></a>SD_RequestOSSem</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sddriver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[1db]"></a>SD_Initialize</STRONG> (ARM, 344 bytes, Stack size 32 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = SD_Initialize &rArr; SDMMC_CalTimeout &rArr; SdCmd_Send_CSD &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_CheckCard
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SetMCIClock
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_Initialize
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RequestOSSem
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_IdentifyCard
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Ver2ActiveInit
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCardInfo
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CalTimeout
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigCard
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReleaseOSSem
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Set_Relative_Addr
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_All_Send_CID
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckSDVersion
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Go_Idle_State
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardInit
</UL>

<P><STRONG><a name="[137]"></a>SD_ReadBlock</STRONG> (ARM, 228 bytes, Stack size 24 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SD_ReadBlock &rArr; SdCmd_Read_Single_Block &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_CheckCard
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_ReadBlock
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_BeforeReadBlock
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RequestOSSem
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReleaseOSSem
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Read_Single_Block
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Deselect_Card
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Select_Card
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSenddata
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSend39data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend39Info
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend01Info
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDNewCardInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnVehIx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnLogIx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnWaveIx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnJDIx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSDCardBlock
</UL>

<P><STRONG><a name="[1df]"></a>SD_ReadMultiBlock</STRONG> (ARM, 320 bytes, Stack size 32 bytes, sddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_CheckCard
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_ReadBlock
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_BeforeReadBlock
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RequestOSSem
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReleaseOSSem
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Read_Multiple_Block
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Stop_Transmission
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Deselect_Card
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Select_Card
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSDCardMultiBlock
</UL>

<P><STRONG><a name="[13a]"></a>SD_WriteBlock</STRONG> (ARM, 232 bytes, Stack size 24 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SD_WriteBlock &rArr; SdHal_WaitBusy &rArr; SdCmd_Send_Status &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_WriteBlock
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_BeforeWriteBlock
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RequestOSSem
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReleaseOSSem
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_WaitBusy
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Write_Single_Block
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Deselect_Card
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Select_Card
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDInfToSaveSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD68ToSaveSend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD62ToSaveSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJD61ToSaveSend
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDNewCardInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnVehIx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnLogIx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnWaveIx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnJDIx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave39ToSD
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSDCardBlock
</UL>

<P><STRONG><a name="[1e2]"></a>SD_WriteMultiBlock</STRONG> (ARM, 368 bytes, Stack size 32 bytes, sddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_WriteBlock
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_WaitReadyforData
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_BeforeWriteBlock
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RequestOSSem
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReleaseOSSem
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_WaitBusy
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Write_Multiple_Block
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Stop_Transmission
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Deselect_Card
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Select_Card
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSDCardMultiBlock
</UL>

<P><STRONG><a name="[231]"></a>SD_EraseBlock</STRONG> (ARM, 392 bytes, Stack size 24 bytes, sddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_CheckCard
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_CheckCardWP
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RequestOSSem
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReleaseOSSem
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Erase
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Erase_Wr_Blk_End
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Erase_Wr_Blk_Start
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Deselect_Card
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Select_Card
</UL>

<P><STRONG><a name="[2f7]"></a>SD_GetZLGSDVer</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sddriver.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>SdHal_EnableMCIBusWidth</STRONG> (ARM, 56 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_Initialize
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigCard
</UL>

<P><STRONG><a name="[22a]"></a>SdHal_SetMCIClock</STRONG> (ARM, 152 bytes, Stack size 24 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SdHal_SetMCIClock &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_Initialize
</UL>

<P><STRONG><a name="[234]"></a>MCI_Delay</STRONG> (ARM, 52 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_Initialize
</UL>

<P><STRONG><a name="[233]"></a>SD_PowerOff</STRONG> (ARM, 56 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_Initialize
</UL>

<P><STRONG><a name="[229]"></a>SdHal_Initialize</STRONG> (ARM, 172 bytes, Stack size 8 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SdHal_Initialize &rArr; SdHal_SetMCIClock &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOff
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Delay
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SetMCIClock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_EnableMCIBusWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[222]"></a>SdHal_OpenDrainCmd</STRONG> (ARM, 56 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigCard
</UL>

<P><STRONG><a name="[236]"></a>MCI_GetCmdResp</STRONG> (ARM, 396 bytes, Stack size 16 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCI_GetCmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>

<P><STRONG><a name="[235]"></a>MCI_SendCmd</STRONG> (ARM, 160 bytes, Stack size 20 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MCI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SendCmd
</UL>

<P><STRONG><a name="[209]"></a>SdHal_SendCmd</STRONG> (ARM, 212 bytes, Stack size 40 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCmd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Ver2ActiveInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Erase
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Erase_Wr_Blk_End
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Erase_Wr_Blk_Start
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Write_Multiple_Block
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Write_Single_Block
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Read_Multiple_Block
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Read_Single_Block
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Set_Bus_Width
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Set_BlockLen
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Go_Inactive_State
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Send_Status
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Stop_Transmission
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Deselect_Card
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Select_Card
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Send_CSD
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Set_Relative_Addr
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_All_Send_CID
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_SD_App_OP_Cond
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Send_ACMD
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckSDVersion
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Send_OP_Cond
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Go_Idle_State
</UL>

<P><STRONG><a name="[140]"></a>SdHal_CheckCard</STRONG> (ARM, 36 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDCheckAntiShake
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_WaitBusy
</UL>

<P><STRONG><a name="[232]"></a>SdHal_CheckCardWP</STRONG> (ARM, 36 bytes, Stack size 0 bytes, sdhal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[22c]"></a>SdHal_BeforeReadBlock</STRONG> (ARM, 144 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
</UL>

<P><STRONG><a name="[237]"></a>DMA_Init</STRONG> (ARM, 420 bytes, Stack size 12 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_WriteBlock
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_ReadBlock
</UL>

<P><STRONG><a name="[22d]"></a>SdHal_ReadBlock</STRONG> (ARM, 200 bytes, Stack size 24 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SdHal_ReadBlock &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
</UL>

<P><STRONG><a name="[22e]"></a>SdHal_BeforeWriteBlock</STRONG> (ARM, 136 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
</UL>

<P><STRONG><a name="[22f]"></a>SdHal_WriteBlock</STRONG> (ARM, 188 bytes, Stack size 24 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SdHal_WriteBlock &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
</UL>

<P><STRONG><a name="[220]"></a>SdHal_WaitBusy</STRONG> (ARM, 196 bytes, Stack size 40 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SdHal_WaitBusy &rArr; SdCmd_Send_Status &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_CheckCard
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Send_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_WaitReadyforData
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Erase
</UL>

<P><STRONG><a name="[230]"></a>SdHal_WaitReadyforData</STRONG> (ARM, 24 bytes, Stack size 8 bytes, sdhal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_WaitBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
</UL>

<P><STRONG><a name="[239]"></a>MCI_DataEndProcess</STRONG> (ARM, 152 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DataInterruptProcess
</UL>

<P><STRONG><a name="[2f8]"></a>MCI_TxActiveProcess</STRONG> (ARM, 340 bytes, Stack size 8 bytes, sdhal.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>MCI_RxActiveProcess</STRONG> (ARM, 456 bytes, Stack size 12 bytes, sdhal.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>MCI_DataInterruptProcess</STRONG> (ARM, 56 bytes, Stack size 4 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MCI_DataInterruptProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DataEndProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler
</UL>

<P><STRONG><a name="[23a]"></a>MCI_DataErrorProcess</STRONG> (ARM, 172 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler
</UL>

<P><STRONG><a name="[1b]"></a>MCI_Handler</STRONG> (ARM, 144 bytes, Stack size 4 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_Handler &rArr; MCI_DataInterruptProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DataErrorProcess
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DataInterruptProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdapp.o(.text)
</UL>
<P><STRONG><a name="[23b]"></a>GUI_Rectangle</STRONG> (ARM, 108 bytes, Stack size 24 bytes, gui_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RLine
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HLine
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Square
</UL>

<P><STRONG><a name="[23e]"></a>GUI_RectangleFill</STRONG> (ARM, 172 bytes, Stack size 32 bytes, gui_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RLine
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HLine
</UL>

<P><STRONG><a name="[23f]"></a>GUI_Square</STRONG> (ARM, 96 bytes, Stack size 24 bytes, gui_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
</UL>

<P><STRONG><a name="[201]"></a>GUI_Line</STRONG> (ARM, 372 bytes, Stack size 56 bytes, gui_basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GUI_Line &rArr; GUI_RLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Point
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RLine
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HLine
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao2_zengyi
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao2_Neima
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao1_zengyi
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao1_Neima
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao4ZY
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao3ZY
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao2ZY
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao1ZY
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLineModify
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chezhong
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao4
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao3
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao1
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayProgramVersion
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInitLcd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunction
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChooseTongdao_Chedao
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChooseChedao
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao4_zengyi
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao4_Neima
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao3_zengyi
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao3_Neima
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LineS
</UL>

<P><STRONG><a name="[240]"></a>GUI_LineWith</STRONG> (ARM, 704 bytes, Stack size 72 bytes, gui_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RLine
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HLine
</UL>

<P><STRONG><a name="[241]"></a>GUI_LineS</STRONG> (ARM, 140 bytes, Stack size 40 bytes, gui_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Point
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
</UL>

<P><STRONG><a name="[207]"></a>GUI_SetColor</STRONG> (ARM, 20 bytes, Stack size 0 bytes, gui_stockc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit
</UL>

<P><STRONG><a name="[2fa]"></a>GUI_GetBackColor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, gui_stockc.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>GUI_GetDispColor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, gui_stockc.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>GUI_ExchangeColor</STRONG> (ARM, 36 bytes, Stack size 0 bytes, gui_stockc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LoadPic1
</UL>

<P><STRONG><a name="[243]"></a>LCD_TestStaBit01</STRONG> (ARM, 60 bytes, Stack size 0 bytes, lcddrive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteTCommand2
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteTCommand3
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteTCommand1
</UL>

<P><STRONG><a name="[247]"></a>LCD_TestStaBit3</STRONG> (ARM, 60 bytes, Stack size 0 bytes, lcddrive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteTData1
</UL>

<P><STRONG><a name="[242]"></a>LCD_WriteTCommand1</STRONG> (ARM, 44 bytes, Stack size 4 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_WriteTCommand1
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TestStaBit01
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAll
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
</UL>

<P><STRONG><a name="[244]"></a>LCD_WriteTCommand3</STRONG> (ARM, 108 bytes, Stack size 12 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TestStaBit01
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdatePoint
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAll
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
</UL>

<P><STRONG><a name="[245]"></a>LCD_WriteTCommand2</STRONG> (ARM, 76 bytes, Stack size 8 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WriteTCommand2
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TestStaBit01
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdatePoint
</UL>

<P><STRONG><a name="[246]"></a>LCD_WriteTData1</STRONG> (ARM, 44 bytes, Stack size 4 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_WriteTData1
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TestStaBit3
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAll
</UL>

<P><STRONG><a name="[248]"></a>LCD_Initialize</STRONG> (ARM, 88 bytes, Stack size 4 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Initialize &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteTCommand3
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteTCommand1
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Initialize
</UL>

<P><STRONG><a name="[249]"></a>LCD_FillAll</STRONG> (ARM, 112 bytes, Stack size 12 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_FillAll &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteTData1
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteTCommand3
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteTCommand1
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillSCR
</UL>

<P><STRONG><a name="[24a]"></a>LCD_UpdatePoint</STRONG> (ARM, 72 bytes, Stack size 16 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteTCommand2
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteTCommand3
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Point
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HLine
</UL>

<P><STRONG><a name="[24b]"></a>GUI_FillSCR</STRONG> (ARM, 76 bytes, Stack size 16 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_FillSCR &rArr; LCD_FillAll &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAll
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Initialize
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>

<P><STRONG><a name="[206]"></a>GUI_Initialize</STRONG> (ARM, 20 bytes, Stack size 4 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_Initialize &rArr; GUI_FillSCR &rArr; LCD_FillAll &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillSCR
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit
</UL>

<P><STRONG><a name="[1a6]"></a>GUI_ClearSCR</STRONG> (ARM, 36 bytes, Stack size 4 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_ClearSCR &rArr; GUI_FillSCR &rArr; LCD_FillAll &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao2_zengyi
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao2_Neima
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao1_zengyi
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao1_Neima
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao4ZY
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao3ZY
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao2ZY
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_Chedao1ZY
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F11
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chezhong
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao4
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao3
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao1
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayProgramVersion
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInitLcd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunction
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChooseTongdao_Chedao
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChooseChedao
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao4_zengyi
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao4_Neima
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao3_zengyi
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao3_Neima
</UL>

<P><STRONG><a name="[202]"></a>GUI_Point</STRONG> (ARM, 176 bytes, Stack size 16 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdatePoint
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLineModify
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LoadLine
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RLine
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HLine
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LineS
</UL>

<P><STRONG><a name="[2fc]"></a>GUI_ReadPoint</STRONG> (ARM, 104 bytes, Stack size 8 bytes, lcddrive.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>GUI_HLine</STRONG> (ARM, 344 bytes, Stack size 24 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GUI_HLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Point
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdatePoint
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LineWith
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
</UL>

<P><STRONG><a name="[23d]"></a>GUI_RLine</STRONG> (ARM, 124 bytes, Stack size 24 bytes, lcddrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GUI_RLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LineWith
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
</UL>

<P><STRONG><a name="[24c]"></a>GUI_LoadLine</STRONG> (ARM, 256 bytes, Stack size 32 bytes, loadbit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LoadPic
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutHZ
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LoadPic1
</UL>

<P><STRONG><a name="[205]"></a>GUI_LoadPic</STRONG> (ARM, 88 bytes, Stack size 32 bytes, loadbit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GUI_LoadPic &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LoadLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawPic
</UL>

<P><STRONG><a name="[24d]"></a>GUI_LoadPic1</STRONG> (ARM, 96 bytes, Stack size 32 bytes, loadbit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LoadLine
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ExchangeColor
</UL>

<P><STRONG><a name="[24f]"></a>GUI_PutHZ</STRONG> (ARM, 92 bytes, Stack size 32 bytes, loadbit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LoadLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_hz
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString8_16A
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString8_16
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HZ
</UL>

<P><STRONG><a name="[1fc]"></a>GUI_PutString8_16A</STRONG> (ARM, 56 bytes, Stack size 24 bytes, loadbit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GUI_PutString8_16A &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutHZ
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HZ
</UL>

<P><STRONG><a name="[250]"></a>GUI_HZ</STRONG> (ARM, 196 bytes, Stack size 32 bytes, loadbit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString8_16A
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutHZ
</UL>

<P><STRONG><a name="[1fe]"></a>GUI_hz</STRONG> (ARM, 104 bytes, Stack size 32 bytes, loadbit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutHZ
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
</UL>

<P><STRONG><a name="[251]"></a>GUI_PutString8_16</STRONG> (ARM, 100 bytes, Stack size 32 bytes, loadbit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutHZ
</UL>

<P><STRONG><a name="[1b3]"></a>Display_Chezhong</STRONG> (ARM, 876 bytes, Stack size 88 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = Display_Chezhong &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ENTER
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
</UL>

<P><STRONG><a name="[196]"></a>DisplayInitLcd</STRONG> (ARM, 172 bytes, Stack size 16 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = DisplayInitLcd &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ENTER
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_3
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_4
</UL>

<P><STRONG><a name="[1a0]"></a>DisplayChooseChedao</STRONG> (ARM, 164 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayChooseChedao &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F2
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_1
</UL>

<P><STRONG><a name="[1ac]"></a>DisplayFunction</STRONG> (ARM, 120 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayFunction &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F3
</UL>

<P><STRONG><a name="[19c]"></a>DisplayChooseTongdao_Chedao</STRONG> (ARM, 560 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayChooseTongdao_Chedao &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_2
</UL>

<P><STRONG><a name="[1a1]"></a>DisplayChedao1_zengyi</STRONG> (ARM, 180 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayChedao1_zengyi &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_1
</UL>

<P><STRONG><a name="[19d]"></a>DisplayChedao2_zengyi</STRONG> (ARM, 180 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayChedao2_zengyi &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_2
</UL>

<P><STRONG><a name="[199]"></a>DisplayChedao3_zengyi</STRONG> (ARM, 284 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayChedao3_zengyi &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_3
</UL>

<P><STRONG><a name="[195]"></a>DisplayChedao4_zengyi</STRONG> (ARM, 180 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayChedao4_zengyi &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_4
</UL>

<P><STRONG><a name="[252]"></a>Seach_TongdaoZY</STRONG> (ARM, 72 bytes, Stack size 16 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Seach_TongdaoZY &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao4
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao3
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTongdaoZY_Chedao1
</UL>

<P><STRONG><a name="[1a2]"></a>DisplayTongdaoZY_Chedao1</STRONG> (ARM, 524 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayTongdaoZY_Chedao1 &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoZY
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ENTER
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_1
</UL>

<P><STRONG><a name="[19e]"></a>DisplayTongdaoZY_Chedao2</STRONG> (ARM, 380 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayTongdaoZY_Chedao2 &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoZY
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ENTER
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_2
</UL>

<P><STRONG><a name="[19a]"></a>DisplayTongdaoZY_Chedao3</STRONG> (ARM, 412 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayTongdaoZY_Chedao3 &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoZY
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ENTER
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_3
</UL>

<P><STRONG><a name="[197]"></a>DisplayTongdaoZY_Chedao4</STRONG> (ARM, 380 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayTongdaoZY_Chedao4 &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoZY
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ENTER
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_4
</UL>

<P><STRONG><a name="[1aa]"></a>DisplayProgramVersion</STRONG> (ARM, 228 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayProgramVersion &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F4
</UL>

<P><STRONG><a name="[1ad]"></a>DisplayChange_Chedao1ZY</STRONG> (ARM, 88 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayChange_Chedao1ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F3
</UL>

<P><STRONG><a name="[1ae]"></a>DisplayChange_Chedao2ZY</STRONG> (ARM, 88 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayChange_Chedao2ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F3
</UL>

<P><STRONG><a name="[1af]"></a>DisplayChange_Chedao3ZY</STRONG> (ARM, 88 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayChange_Chedao3ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F3
</UL>

<P><STRONG><a name="[1b0]"></a>DisplayChange_Chedao4ZY</STRONG> (ARM, 88 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayChange_Chedao4ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_F3
</UL>

<P><STRONG><a name="[189]"></a>DisplayChange_TongDao1ZY</STRONG> (ARM, 404 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayChange_TongDao1ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_3
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_5
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_6
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_7
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_8
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_9
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_0
</UL>

<P><STRONG><a name="[18a]"></a>DisplayChange_TongDao2ZY</STRONG> (ARM, 280 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayChange_TongDao2ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_3
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_5
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_6
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_7
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_8
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_9
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_0
</UL>

<P><STRONG><a name="[18b]"></a>DisplayChange_TongDao3ZY</STRONG> (ARM, 312 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayChange_TongDao3ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_3
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_5
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_6
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_7
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_8
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_9
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_0
</UL>

<P><STRONG><a name="[18c]"></a>DisplayChange_TongDao4ZY</STRONG> (ARM, 280 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayChange_TongDao4ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_3
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_5
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_6
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_7
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_8
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_9
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_0
</UL>

<P><STRONG><a name="[18d]"></a>DisplayChange_TongDao5ZY</STRONG> (ARM, 324 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayChange_TongDao5ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_3
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_5
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_6
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_7
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_8
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_9
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_0
</UL>

<P><STRONG><a name="[18e]"></a>DisplayChange_TongDao6ZY</STRONG> (ARM, 280 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayChange_TongDao6ZY &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_3
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_5
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_6
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_7
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_8
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_9
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_0
</UL>

<P><STRONG><a name="[253]"></a>Seach_TongdaoNM</STRONG> (ARM, 144 bytes, Stack size 24 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Seach_TongdaoNM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao2_Neima
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao1_Neima
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao4_Neima
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChedao3_Neima
</UL>

<P><STRONG><a name="[185]"></a>DisplayChedao1_Neima</STRONG> (ARM, 456 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayChedao1_Neima &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoNM
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_0
</UL>

<P><STRONG><a name="[186]"></a>DisplayChedao2_Neima</STRONG> (ARM, 364 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayChedao2_Neima &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoNM
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_0
</UL>

<P><STRONG><a name="[187]"></a>DisplayChedao3_Neima</STRONG> (ARM, 396 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayChedao3_Neima &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoNM
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_0
</UL>

<P><STRONG><a name="[188]"></a>DisplayChedao4_Neima</STRONG> (ARM, 364 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DisplayChedao4_Neima &rArr; PrintCharXY &rArr; PrintChar &rArr; GUI_hz &rArr; GUI_PutHZ &rArr; GUI_LoadLine &rArr; GUI_Point &rArr; LCD_UpdatePoint &rArr; LCD_WriteTCommand3
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCharXY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearSCR
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoNM
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_0
</UL>

<P><STRONG><a name="[254]"></a>SaveParams</STRONG> (ARM, 340 bytes, Stack size 16 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SaveParams &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_TongdaoZY
</UL>

<P><STRONG><a name="[1b4]"></a>Save_TongdaoZY</STRONG> (ARM, 68 bytes, Stack size 16 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Save_TongdaoZY &rArr; SaveParams &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ENTER
</UL>

<P><STRONG><a name="[255]"></a>Seach_TongdaoZero</STRONG> (ARM, 148 bytes, Stack size 24 bytes, ui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>

<P><STRONG><a name="[256]"></a>SaveNetInfo</STRONG> (ARM, 48 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SaveNetInfo &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNetParam
</UL>

<P><STRONG><a name="[fe]"></a>InitNetParam</STRONG> (ARM, 228 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitNetParam &rArr; SaveNetInfo &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
</UL>

<P><STRONG><a name="[fd]"></a>InitSystem</STRONG> (ARM, 824 bytes, Stack size 16 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitSystem &rArr; InitNetParam &rArr; SaveNetInfo &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNetParam
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
</UL>

<P><STRONG><a name="[257]"></a>InitThreshold</STRONG> (ARM, 76 bytes, Stack size 8 bytes, ui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNonWeight
</UL>

<P><STRONG><a name="[258]"></a>InitNonWeight</STRONG> (ARM, 176 bytes, Stack size 8 bytes, ui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitThreshold
</UL>

<P><STRONG><a name="[fc]"></a>ClearStartupCnt</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ClearStartupCnt &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
</UL>

<P><STRONG><a name="[b0]"></a>AddStartupCnt</STRONG> (ARM, 280 bytes, Stack size 16 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AddStartupCnt &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadC256
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNORFlash
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[109]"></a>YBRestart</STRONG> (ARM, 24 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = YBRestart
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
</UL>

<P><STRONG><a name="[25a]"></a>SaveTime</STRONG> (ARM, 16 bytes, Stack size 16 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SaveTime &rArr; SetRTCTime &rArr; SET8563 &rArr; I2C2_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCTime
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
</UL>

<P><STRONG><a name="[fb]"></a>ProModInit</STRONG> (ARM, 1408 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ProModInit &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
</UL>

<P><STRONG><a name="[ff]"></a>InitJDParam</STRONG> (ARM, 424 bytes, Stack size 16 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitJDParam &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProcessPrt
</UL>

<P><STRONG><a name="[125]"></a>SendCommandToPC0</STRONG> (ARM, 18540 bytes, Stack size 112 bytes, prtclwj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SendCommandToPC0 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_CheckCard
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckSD
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U5SendBytes
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2SendBytes
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataNet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendCmd2PC_ZONG
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceStatus0
</UL>

<P><STRONG><a name="[129]"></a>WJ_ProcessCmd</STRONG> (ARM, 11444 bytes, Stack size 80 bytes, prtclwj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = WJ_ProcessCmd &rArr; SendCommandToPC0 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnVehIx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnLogIx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnWaveIx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDCheckAntiShake
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YBRestart
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProModInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNetParam
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitJDParam
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U3SendBytes
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAInitParam
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FInitVehStr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTime
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNetInfo
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParams
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProcessCmd_ZONG
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
</UL>

<P><STRONG><a name="[123]"></a>ToBuff0</STRONG> (ARM, 4152 bytes, Stack size 96 bytes, prtclwj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = ToBuff0 &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToProtocolBuff
</UL>

<P><STRONG><a name="[25b]"></a>SendDeviceStatus0</STRONG> (ARM, 64 bytes, Stack size 8 bytes, prtclwj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
</UL>

<P><STRONG><a name="[12b]"></a>FSendHeartbeat</STRONG> (ARM, 160 bytes, Stack size 8 bytes, prtclwj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FSendHeartbeat &rArr; SendDataNet &rArr; S_tx_process
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataNet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
</UL>

<P><STRONG><a name="[12c]"></a>FJudgeUpdate</STRONG> (ARM, 340 bytes, Stack size 8 bytes, prtclwj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FJudgeUpdate &rArr; Socket_Listen
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
</UL>

<P><STRONG><a name="[122]"></a>ToBuff0ForBD</STRONG> (ARM, 1848 bytes, Stack size 32 bytes, prtclwj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ToBuff0ForBD &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToProtocolBuff
</UL>

<P><STRONG><a name="[25c]"></a>VehicleType_judge</STRONG> (ARM, 2008 bytes, Stack size 8 bytes, prtclwjold.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VehicleType_judge
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff1
</UL>

<P><STRONG><a name="[121]"></a>ToBuff1</STRONG> (ARM, 1008 bytes, Stack size 112 bytes, prtclwjold.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ToBuff1 &rArr; Crc3_create &rArr; Nm2Bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc3_create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nm2Bcd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleType_judge
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToProtocolBuff
</UL>

<P><STRONG><a name="[126]"></a>SendCommandToPC_FXC</STRONG> (ARM, 4944 bytes, Stack size 24 bytes, prtclfxc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SendCommandToPC_FXC &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendCmd2PC_ZONG
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceStatus_FXC
</UL>

<P><STRONG><a name="[12a]"></a>ProcessCmd_FXC</STRONG> (ARM, 4360 bytes, Stack size 56 bytes, prtclfxc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ProcessCmd_FXC &rArr; SendCommandToPC0 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC_FXC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YBRestart
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U3SendBytes
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeW5100
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAInitParam
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTime
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNetInfo
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParams
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProcessCmd_ZONG
</UL>

<P><STRONG><a name="[124]"></a>ToBuff_FXC</STRONG> (ARM, 3044 bytes, Stack size 88 bytes, prtclfxc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = ToBuff_FXC &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToProtocolBuff
</UL>

<P><STRONG><a name="[25d]"></a>SendDeviceStatus_FXC</STRONG> (ARM, 64 bytes, Stack size 8 bytes, prtclfxc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC_FXC
</UL>

<P><STRONG><a name="[12d]"></a>FSendHeartbeat_FXC</STRONG> (ARM, 168 bytes, Stack size 16 bytes, prtclfxc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FSendHeartbeat_FXC &rArr; SendDataNet &rArr; S_tx_process
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataNet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
</UL>

<P><STRONG><a name="[12e]"></a>FJudgeUpdate_FXC</STRONG> (ARM, 332 bytes, Stack size 8 bytes, prtclfxc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FJudgeUpdate_FXC &rArr; Socket_Listen
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
</UL>

<P><STRONG><a name="[25e]"></a>FProcessPrt</STRONG> (ARM, 452 bytes, Stack size 16 bytes, prtclwjjd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FProcessPrt &rArr; InitJDParam &rArr; WriteC256 &rArr; I2C1_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteC256
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitJDParam
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
</UL>

<P><STRONG><a name="[264]"></a>FCheckUserKey</STRONG> (ARM, 128 bytes, Stack size 0 bytes, prtclwjjd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
</UL>

<P><STRONG><a name="[263]"></a>FAskAxleLoadData</STRONG> (ARM, 240 bytes, Stack size 0 bytes, prtclwjjd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
</UL>

<P><STRONG><a name="[25f]"></a>FAnalyResendData</STRONG> (ARM, 892 bytes, Stack size 24 bytes, prtclwjjd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FAnalyResendData &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSaveNumFromDate
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
</UL>

<P><STRONG><a name="[260]"></a>FCompleteData</STRONG> (ARM, 280 bytes, Stack size 24 bytes, prtclwjjd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FCompleteData &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JDCRC16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendData
</UL>

<P><STRONG><a name="[10b]"></a>FSendData</STRONG> (ARM, 48 bytes, Stack size 16 bytes, prtclwjjd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FSendData &rArr; FCompleteData &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCompleteData
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSenddata
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReSend39data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend6FInfo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend39Info
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSend01Info
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
</UL>

<P><STRONG><a name="[10a]"></a>FUpOrderData</STRONG> (ARM, 476 bytes, Stack size 0 bytes, prtclwjjd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
</UL>

<P><STRONG><a name="[128]"></a>WJJD_ProcessCmd</STRONG> (ARM, 956 bytes, Stack size 544 bytes, prtclwjjd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = WJJD_ProcessCmd &rArr; FAnalyResendData &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckDeviceID
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUpOrderData
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendData
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JDCRC16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAnalyResendData
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAskAxleLoadData
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckUserKey
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProcessPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProcessCmd_ZONG
</UL>

<P><STRONG><a name="[2fd]"></a>WJJDSendCommandToPC0</STRONG> (ARM, 4 bytes, Stack size 0 bytes, prtclwjjd.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>FReSenddata</STRONG> (ARM, 1320 bytes, Stack size 600 bytes, prtclwjjd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = FReSenddata &rArr; FGetNextSDNum &rArr; FGetDateFromNum &rArr; FGetSaveNumFromDate &rArr; FGetPreYearNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetNextSDNum
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCheckSendData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSendDataForErr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDateFromNum
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
</UL>

<P><STRONG><a name="[181]"></a>FReSend39data</STRONG> (ARM, 648 bytes, Stack size 1592 bytes, prtclwjjd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1708<LI>Call Chain = FReSend39data &rArr; SD_ReadBlock &rArr; SdCmd_Read_Single_Block &rArr; SdHal_SendCmd &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGet39OrderForErr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
</UL>

<P><STRONG><a name="[2fe]"></a>__semihosting$guard</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY (via BLX)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY (via BLX)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY (via BLX)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY (via BLX)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY (via BLX)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY (via BLX)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedUnionWgtAlg (via BLX)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProPostAxle (via BLX)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc (via BLX)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedMatchRule (via BLX)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpanColumnTimeMatch (via BLX)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveColumElem (via BLX)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd (via BLX)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd (via BLX)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0 (via BLX)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC (via BLX)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess (via BLX)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal (via BLX)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenAxleCtl (via BLX)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FStudyAlg (via BLX)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact (via BLX)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard (via BLX)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave (via BLX)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9 (via BLX)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7 (via BLX)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6 (via BLX)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4 (via BLX)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2 (via BLX)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDebugInfo (via BLX)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow (via BLX)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchSecondRow (via BLX)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop (via BLX)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow (via BLX)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow (via BLX)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideFristRow (via BLX)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow (via BLX)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum (via BLX)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostVehForNormal (via BLX)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostAxle (via BLX)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehXieZouStatus (via BLX)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec1 (via BLX)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop (via BLX)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendWaveBE (via BLX)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum (via BLX)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplay (via BLX)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormatData (via BLX)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormatDataXY (via BLX)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chezhong (via BLX)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInitLcd (via BLX)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoZero (via BLX)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoNM (via BLX)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoZY (via BLX)
</UL>

<P><STRONG><a name="[267]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[268]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[269]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[26a]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[266]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5f]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
</UL>

<P><STRONG><a name="[26d]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[63]"></a>_printf_int_oct</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, _printf_oct_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[300]"></a>_printf_longlong_oct</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_oct_int.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[301]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via BLX)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[272]"></a>srand</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[6b]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[1ff]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormatDataXY (via BLX)
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDInfToSaveSend
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormOffnetBuf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormVehBuf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormLogBuf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDFormWaveBuf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff_FXC
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff0
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC_FXC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataNet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostVehForNormal
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_W5100
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCompleteData
</UL>

<P><STRONG><a name="[273]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[302]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWheelBelongPost
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveColumElem
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInitSolo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC_FXC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveAndInitColum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideSecondRow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNetSetting
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[303]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProPostAxle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInitSolo
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectZT4AxleDisCal
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicMem_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideSecondRow
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FInitVehStr
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao6ZY
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao5ZY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao4ZY
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao3ZY
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao2ZY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChange_TongDao1ZY
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedUnionWgtAlg
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProPostAxle
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedMatchRule
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpanColumnTimeMatch
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveColumElem
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDNewCardInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDCptAddr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnVehIx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnLogIx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnWaveIx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnJDIx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff_FXC
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC_FXC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenAxleCtl
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FStudyAlg
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDebugInfo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchSecondRow
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicMem_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_diagnosis_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideFristRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostVehForNormal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostAxle
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;External_Equipment_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehXieZouStatus
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec1
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendWaveBE
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FInitVehStr
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoZero
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoNM
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seach_TongdaoZY
</UL>

<P><STRONG><a name="[275]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[274]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JZInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedUnionWgtAlg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFristRowMtchWheel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWheelBelongPost
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProPostAxle
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPassThrColumMatch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInitSolo
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDInfToSaveSend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnVehIx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnLogIx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnWaveIx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSysnJDIx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnionWgtFunction
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProModInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystem
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitJDParam
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicMem_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideSecondRow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;External_Equipment_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO2ZT4Wave
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FInitVehStr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormatData
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_FPGA
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Uart3
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormatDataXY
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chezhong
</UL>

<P><STRONG><a name="[306]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[308]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ESC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey_ENTER
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetNextSDNum
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetLastSaveNum
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDateFromNum
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetSaveNumFromDate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetPreYearNum
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedUnionWgtAlg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchAxleAndAxle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FProPostAxle
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedMatchRule
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstRowZT
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDiffTimeMatch
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMidTimeMatch
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpanColumnTimeMatch
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveColumElem
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDCptAddr
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJ_ProcessCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WJJD_ProcessCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff_FXC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff0ForBD
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff0
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd_FXC
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSave39ToSD
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehAxleCnt1to2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPreDeal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenAxleCtl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetCarAxleGroupMode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehAxleWtJudge
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FStudyAlg
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_UI
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Laser_Interact
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecWave
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec9
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec7
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec4
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDebugInfo
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDaysOneYear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIsRunYear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticXiuZhengIndex
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScaleUp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchSecondRow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTransLocation
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAInitParam
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchSecondRow
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideFristRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostVehForNormal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHideZTPostAxle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCapture
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FVehXieZouStatus
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec1
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLogicForLoop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSendWaveBE
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDeleteValidZTOrColum
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForNormal
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLineModify
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_FPGA
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_W5100
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Timer0
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET8563
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chezhong
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCompleteData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdHal_SetMCIClock
</UL>

<P><STRONG><a name="[309]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via BLX)
</UL>

<P><STRONG><a name="[279]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log (via BLX)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp (via BLX)
</UL>

<P><STRONG><a name="[26c]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[265]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[22]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[27a]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[67]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[27c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[27d]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[69]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[27f]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[26e]"></a>_wcrtomb</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[26b]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via BLX)
</UL>

<P><STRONG><a name="[280]"></a>__rt_ctype_table</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via BLX)
</UL>

<P><STRONG><a name="[278]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via BLX)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via BLX)
</UL>

<P><STRONG><a name="[30c]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[30f]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[6d]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common (via BLX)
</UL>

<P><STRONG><a name="[74]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[292]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[310]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetNextSDNum
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetLastSaveNum
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGetDateFromNum
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetailedUnionWgtAlg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWheelSearch4AxleZT
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindWonderColumMatch
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCurAxleOrPreVeh
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchRuleFunc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPassThrColumMatch
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDInfToSaveSend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff_FXC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToBuff0
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToPC0
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjdlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCompJDLen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FStudyAlg
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSDCard
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec6
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRec2
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nm2Bcd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFendu
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchThirdRow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMatchSecondRow
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForLoop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchThirdRow
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchHideSecondRow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchFristRow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMatchColumAndCloum
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPostVehForNormal
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRTCTime
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCardInfo
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CalTimeout
</UL>

<P><STRONG><a name="[7d]"></a>vicInitial</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[9]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[8]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IRQ_Handler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[58]"></a>vicControl</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInterruptAdd
</UL>

<P><STRONG><a name="[290]"></a>__ARM_fpclassify</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[288]"></a>__kernel_poly</STRONG> (ARM, 240 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[28a]"></a>__mathlib_dbl_underflow</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[270]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[16a]"></a>exp</STRONG> (ARM, 856 bytes, Stack size 112 bytes, exp.o(i.exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = exp &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via BLX)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
</UL>

<P><STRONG><a name="[165]"></a>log</STRONG> (ARM, 1300 bytes, Stack size 640 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via BLX)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
</UL>

<P><STRONG><a name="[24]"></a>_get_lc_ctype</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>SoftwareInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInterruptAdd
</UL>

<P><STRONG><a name="[3a]"></a>OSIntCtxSw</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[293]"></a>__OSStartHighRdy</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OSStartHighRdy
</UL>

<P><STRONG><a name="[289]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[297]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[29b]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[29f]"></a>__fpl_dcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[29d]"></a>_ddiv</STRONG> (ARM, 584 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[291]"></a>__aeabi_cdcmpeq</STRONG> (ARM, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[29e]"></a>_dcmpeq</STRONG> (ARM, 148 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[28e]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[2a0]"></a>_dfix</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_d2uiz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
</UL>

<P><STRONG><a name="[2a1]"></a>_dfixu</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[311]"></a>_dflt</STRONG> (ARM, 52 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[28d]"></a>__aeabi_cdcmple</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[2a2]"></a>_dcmple</STRONG> (ARM, 148 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2a5]"></a>__fpl_dcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[2a3]"></a>_dmul</STRONG> (ARM, 364 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[29a]"></a>__fpl_dnaninf</STRONG> (ARM, 184 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[299]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[28c]"></a>__aeabi_cdrcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[2a4]"></a>_drcmple</STRONG> (ARM, 140 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[28f]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[2a6]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FJDProcess
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[2a8]"></a>_dsub</STRONG> (ARM, 508 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1f7]"></a>__aeabi_fadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Temperature
</UL>

<P><STRONG><a name="[2a9]"></a>_fadd</STRONG> (ARM, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[1f6]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Temperature
</UL>

<P><STRONG><a name="[2ad]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_f2iz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RootFloat
</UL>

<P><STRONG><a name="[2ae]"></a>_ffix</STRONG> (ARM, 68 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadFromTDC
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Temperature
</UL>

<P><STRONG><a name="[312]"></a>_fflt</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[11d]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjdlen
</UL>

<P><STRONG><a name="[313]"></a>_ffltu</STRONG> (ARM, 40 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RootFloat
</UL>

<P><STRONG><a name="[2af]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2ac]"></a>__fpl_fnaninf</STRONG> (ARM, 160 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[2ab]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_frsub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RootFloat
</UL>

<P><STRONG><a name="[2b0]"></a>_frsb</STRONG> (ARM, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[314]"></a>__aeabi_fsub</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[2b2]"></a>_fsub</STRONG> (ARM, 256 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[29c]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[28b]"></a>__ARM_scalbn</STRONG> (ARM, 104 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[2b3]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4]"></a>Undefined</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[6]"></a>PrefetchAbort</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[7]"></a>DataAbort</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[3]"></a>ResetInit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStack
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[37]"></a>IRQ_SCI1_Func</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[38]"></a>IRQ_SCI2_Func</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[25]"></a>SetmicIrqFunc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[26]"></a>ClrmicIrqFunc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[27]"></a>EnablemicIrq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[28]"></a>DisablemicIrq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[29]"></a>SetmicFiq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[2a]"></a>ClrmicFiq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[2b]"></a>Setsic1IrqFunc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[2c]"></a>Clrsic1IrqFunc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[2d]"></a>Enablesic1Irq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[2e]"></a>Disablesic1Irq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[2f]"></a>Setsic1Fiq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[30]"></a>Clrsic1Fiq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[31]"></a>Setsic2IrqFunc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[32]"></a>Clrsic2IrqFunc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[33]"></a>Enablesic2Irq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[34]"></a>Disablesic2Irq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[35]"></a>Setsic2Fiq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[36]"></a>Clrsic2Fiq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, viccontrol.o(RUNFIRST))
<BR>[Address Reference Count : 1]<UL><LI> viccontrol.o(RUNFIRST)
</UL>
<P><STRONG><a name="[82]"></a>OS_InitTaskStat</STRONG> (ARM, 28 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[86]"></a>OS_InitTaskIdle</STRONG> (ARM, 28 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[8b]"></a>OS_InitEventList</STRONG> (ARM, 80 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[8a]"></a>OS_InitTCBList</STRONG> (ARM, 116 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[89]"></a>OS_InitRdyList</STRONG> (ARM, 88 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[88]"></a>OS_InitMisc</STRONG> (ARM, 64 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3b]"></a>TASK_SW</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[3c]"></a>ENTER_CRITICAL</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[3d]"></a>EXIT_CRITICAL</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[3e]"></a>ISRBegin</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[3f]"></a>ChangeToSYSMode</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[40]"></a>ChangeToUSRMode</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[41]"></a>_OSStartHighRdy</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OSStartHighRdy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[42]"></a>TaskIsARM</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TaskIsARM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[43]"></a>TaskIsTHUMB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TaskIsTHUMB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[44]"></a>OSISRNeedSwap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[45]"></a>GetOSFunctionAddr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[46]"></a>GetUsrFunctionAddr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[47]"></a>EnableIRQ</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_Excetion</STRONG> (ARM, 560 bytes, Stack size 0 bytes, i2c1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2c1.o(.text)
</UL>
<P><STRONG><a name="[1c8]"></a>Wait_I2c_End</STRONG> (ARM, 100 bytes, Stack size 0 bytes, i2c1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteNByte
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadNByte
</UL>

<P><STRONG><a name="[1a]"></a>I2C2_Excetion</STRONG> (ARM, 536 bytes, Stack size 0 bytes, i2c2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2c2.o(.text)
</UL>
<P><STRONG><a name="[1cb]"></a>Wait_I2c_End</STRONG> (ARM, 100 bytes, Stack size 0 bytes, i2c2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WriteNByte
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadNByte
</UL>

<P><STRONG><a name="[1d0]"></a>SetPageAddr</STRONG> (ARM, 60 bytes, Stack size 0 bytes, nandflash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramNandPage
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNandPage
</UL>

<P><STRONG><a name="[1ce]"></a>SetBlockAddr</STRONG> (ARM, 48 bytes, Stack size 0 bytes, nandflash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNandBlock
</UL>

<P><STRONG><a name="[1d1]"></a>DelayNS</STRONG> (ARM, 44 bytes, Stack size 0 bytes, nandflash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNandPage
</UL>

<P><STRONG><a name="[1c]"></a>IRQ_Timer0</STRONG> (ARM, 364 bytes, Stack size 8 bytes, timer0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ_Timer0 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer0.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>IRQ_Keyboard</STRONG> (ARM, 220 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ_Keyboard &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[20f]"></a>word_to_byte</STRONG> (ARM, 40 bytes, Stack size 0 bytes, sdcmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_Send_CSD
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd_All_Send_CID
</UL>

<P><STRONG><a name="[286]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[285]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[284]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[287]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2a7]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[298]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2b1]"></a>_fadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[2aa]"></a>_fsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[23]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[282]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[27b]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[27e]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
